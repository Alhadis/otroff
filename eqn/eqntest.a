!<arch>
et.bcw          627314299   9     1     100666  2305      `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.bcw:
.ta .5i
.nf
.EQ
gfont I
4.05.~~ int dx over { ae sup mx - be sup -mx } ~=~
left { lpile 
{ 1 over { 2m sqrt ab } ~ log ~ { sqrt a e sup mx - sqrt b }
  over { sqrt a e sup mx  + sqrt b } 
above
 1 over { m sqrt ab } roman ~tanh sup -1 ( sqrt a over sqrt b e sup mx ) 
above
 - 1 over { m sqrt ab  } roman ~coth sup -1
  ( sqrt a over sqrt b e sup mx ), 
  ~~~~~~~~~(a>0,~b>0)
}
.EN
.sp
.EQ
define -+ X ^"\v'.2m'\z\(pl\v'-.4m'\(mi\v'.4m'\v'-.2m'"^ X
define uh "U sub h"
define phi "PHI sub i"
define phr "PHI sub r"
define psi "PSI sub i"
define psr "PSI sub r"
define p4 "pi over 4"
define v0 "V sub 0"
define vh "V sub h"
define u0 "U sub 0"
define a0 "|A sub 0 | sup 2~~"
.EN
.EQ
delim $$
.EN
.EQ
I sub 1~=~a0 left {
1~-~4~{ u0  uh }over{( u0 + uh ) sup 2 } ~sin sup 2 delta over 2
right}
^^
{[ sinh sup 2 phi + cos sup 2 ( phr - p4 )]}
over {d^ sqrt{1-Y sup 2}}
.EN
.sp2
.EQ
I sub 2~=~4 a0~{v0 sup 2 sin sup 2 delta over 2~ 
[ sinh sup 2 psi + cos sup 2 (| psr |- p4 )]} over
{( v0 + vh ) sup 2 |d sub A sup prime -d| ( v0  vh ) sup 0.5 }
.EN
.sp2
.EQ
I sub 3~=~  a0 ~v0 over {  (d|d sub A sup prime -d|) sup 0.5
(1-Z sup 2 ) sup 0.25 (1-Y sup 2 ) sup 0.25 ( v0 + vh )
}
.EN
.sp 1
.EQ
~~~~~~~~~~ "{" 2~sin sup 2 ( delta over 2 )[ mark cos ( phr - psr - p4 +- p4 )
cosh ( phi + psi )
.EN
.EQ
~~~~~~~~~~ lineup +~cos ( phr + psr - p4 -+  p4 ) cosh ( phi - psi )]
~{u0 - uh} over {u0 + uh}
.EN
.sp1
.EQ
~~~~~~~~~~ ~~+~sin ^ delta [ mark sin ( phr - psr - p4 +- p4 ) sinh ( phi + psi )
.EN
.sp 1
.EQ
~~~~~~~~~~ lineup +~ sin ( phr + psr - p4 -+  p4 ) sinh ( phi - psi )]
"}"
.EN
.sp
.EQ
V bar sub cc ~=~  left [ 1+ 51 over { beta  bar ( beta  bar +1)  } right ]
I bar sub mu R bar sub 1 ~+~ { I bar sub mu R bar sub E } over alpha bar
~+~  lambda left [ 2~ ln ( I bar sub mu over I bar sub s  )
+ ln (51  alpha  bar  over  beta  bar  ) right ]    
~~~~(2)
.EN
.sp
.EQ
A bar sub mu I bar sub mu ~=~
alpha  bar 
left [ 1- (  alpha  bar  over   alpha  bar  sub L  )
e  sup { - V bar sub i / lambda }
right ]
sum from j=1 to N
w sub j
~+~ alpha  bar
e  sup { - V bar sub i / lambda }
sum from j=N+1 to M
w sub j
~~~~~(3)
.EN
.sp
.EQ
size 16 font 3 {
r sub m ~=~
{q sub m}
over 
{
{
[{x under} sup t x under ~-~ {q under} sup t q under ]
}
sup half }
.
}
.EN

et.coot         627314299   9     1     100666  12891     `
.so /usr/lib/tmac/tmac.s
.LP
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.coot:
.EQ
delim $$
define lower "sub"
define upper "sup"
tdefine chi % "\v'-.2m'\(*x\v'.2m'" %
define app X\(apX
tdefine || % \(or\(or %
tdefine <wig % "\z<\v'.4m'\(ap\v'-.4m'" %
ndefine <wig %{ < from "~" }%
tdefine >wig % "\z>\v'.4m'\(ap\v'-.4m'" %
ndefine >wig %{ > from "~" }%
tdefine langle % "\b'\(sl\e'" %
ndefine langle %<%
tdefine rangle % "\b'\e\(sl'" %
ndefine rangle %>%
tdefine == % "\z\(eq\v'.23m'\(mi\v'-.23m'" %
tdefine star  % font CW * %
ndefine star %*%
tdefine hbar % "\zh\v'-.6m'\(ru\v'.6m'" %
ndefine hbar % h\u-\d %
ndefine ppd % _| %
tdefine ppd % "\o'\(ru\s-2\(or\s+2'" %
tdefine <-> % "\o'\(<-\(->'" %
ndefine <-> % "<-->" %
tdefine => % "\z\(->\v'.15m'\(->\v'-.15m'" %
tdefine <-> % "\z\(->\(<-" %
ndefine <-> % "<->" %
tdefine <=> % "\s-2\z<\h'.3m'\z\(eq\h'.6m'\(eq\h'-.6m'>\s+2" %
ndefine <=> % "<=>" %
define prop X\(ptX
tdefine ang % "\fR\zA\v'-.3m'\h'.2m'\(de\v'.3m'\fP\h'.2m'" %
ndefine ang % to o %
define disc % bold "disc" %
define notmember % "\o'\(sl\(mo'" %
.EN
.FP palatino
.de BS
.ps 8
.vs 10p
..
.de BE
.sp
.ps \\n(PS
.vs \\n(VS
..
.ds VN 11
.ds NU 6
.ds LH NIGEL COOTE
.ds RH INCLUSIVE ANNIHILATION IN YUKAWA THEORY
.ds CH -- % --
.nr PS 10
.nr VS 12
.NR LL 7.5i
.po .25i
.TL
Inclusive annihilation in Yukawa theory*
.AU
Nigel Coote
.AI
Joseph Henry Laboratories, Princeton University, Princeton, New Jersey  08540
.ft 1
(Received 1 August 1974)
.AB -
.ps -1
In the model of Yukawa field theory we
consider the inclusive process
$e sup + ~+~e sup -$ $ ~->~ gamma (p) $ $ ~->~ pi (k)~+~
roman anything$.
We find, by summing up the logarithms,
that certain transforms $H sup (n)$ of the
amplitude, which in the high-energy limit
$u~==~p sup 2 ~->~ inf$
may be identified with the moments
$int lower 1 upper {0} d omega omega sup
n+1 F bar ( omega ,p sup 2 )$
of the structure functions
$F bar ( omega ,p sup 2 )$,
have simple leading behavior.
At a fixed point of the renormalization
group the $H sup (n)$ would grow like
a fractional power $delta sub n$ of
$p sup 2$.
$delta sub n$ is a property of the
underlying theory (Yukawa) rather than
the structure of the pion, treated as a bound state, and
may be calculated in perturbation theory.
.AE
.SH
I.  INTRODUCTION
.PP
The object of this paper is to study
the scaling behavior of the amplitude
$H(k,p)$ (see Fig. 1),
relevant to
.BS
.sp 
.ce
FIG. 1. The amplitude $ {H = | gamma ( p ) -> pi (k) + roman anything | sup 2}$.
.BE
.EQ I
gamma (p)~->~ pi (k)~+~ roman anything
.EN
in the high-energy limit
.EQ I (1)
u~==~p sup 2 ~->~ inf ,
.EN (1)
with
.EQ L
H sub {mu nu} (k,p sup 2 ) = 
sum from {n}~ mark langle 0|J sub mu (0)|
pi (k),n rangle ~ langle pi (k),n|J sub nu (0)|0 rangle 
.EN
.EQ L (2)
lineup times ~delta sup 4 (p-k-p sub n )
(2 pi ) sup 7 ,
.EN (2)
when the underlying theory is the
Yukawa field theory
.KS
.EQ L
bold L ~ =~ mark psi bar (
i gamma cdot partial -M sub F ) psi
+( half )( partial sub mu
phi ) sup 2 -( half )m sub S sup 2 phi
sup 2 - g psi bar psi phi
.EN
.EQ L (3)
lineup - ~( lambda /4!) phi sup 4 ~+~
roman counterterms
.EN (3)
.KE
(for unexplained notation and the
relation of $H$ to the usual structure functions
see Appendix B).
.PP
To this end we follow the method
Mueller used for $phi sup 4$
field theory.$"" sup 1$  We
believe the extension of Mueller's
method to the richer Yukawa theory 
reveals more of the structure which would be
found in a more realistic theory.
In particular, we can treat the
pion as a bound state rather than a
fundamental field, and see how this fits
in with conventional parton model
ideas.$"" sup 2$
We can also see to what extent
``symmetry'' principles hold in this
model; however, we only touch on this
question briefly in this paper.
We believe that a realistic theory
would be asymptotically free.
Therefore, the final discussion proceeds as if
Yukawa theory had a fixed point
of the renormalization group,
$(g sub 0 , lambda sub 0 )$,
and the anomalous dimensions were small.
.PP
The amplitude $H$ is approached
in two steps.  We start from an amplitude
$T sup ij (k,p)$,
two-particle irreducible in the $t$ channel
(see Fig. 2), and proceed to the
full kernels $K sup ij$, $i,j=0,1$
via the system of integral equations of the generic form
.BS
.sp 
.ti +2n
FIG. 2. Disallowed decompositions (a) for the two-scalar irreducible amplitude
${S sup 11}$;
(b) for the two-Fermi irreducible
amplitude
$ {F sup 11} . ~~ ->$ = the Fermi line (particle or antiparticle);
$ f sup (n) <-$ = the scalar line.
T denotes an amplitude irreducible with respect to both scalars
and fermions.
In this figure and in subsequent diagrams of this type
the variables
$ {k sup 2 ,  p sup 2}$ are off the mass shell.
.BE
shown in Fig. 3.
Here
the
$K sup ij$ are defined analogously
to Eq. (2), save that the
external particles $pi , gamma$ are
replaced by the fundamental fields
$psi , phi$ off the mass shell;
e.g., $i=1,~j=0$ means that
lines carrying momentum $k,p$ are
Fermi, scalar, respectively:
.EQ L
B~ mark == ~K sub {alpha beta} sup 10
(k,p)
.EN
.KS
.EQ L
lineup == sum from {n} mark delta sup 4
(p-k-p sub n ) int~d sup 4 ye sup
{ik cdot y} langle 0| T bar psi bar sub
alpha (0) phi (y)|n rangle sub A (
2 pi ) sup 4
.EN
.EQ L (4)
lineup ~ times ~ int d sup 4 ze sup
{-ik cdot z} langle n|T psi sub beta (0)
phi (z)|0 rangle sub A ,
.EN (4)
.KE
with subscript $A$ denoting the amputated matrix
element; the propagator for $psi , phi$
is factored out.
In the spacelike analog $(p sup 2 ~<~0,~k
sup 2 ~<~0)$ relevant to electron-pion scattering,
.BS
.sp
.ti +2n
FIG. 3. Generic integral equation:
$  {k sup 2 = v,~ q sup 2 = u ',~ p sup 2 = u}$.
An example of spin notation
(we are only interested at present in cases ${l sub k = 0 ~roman or~ half}$)
is ${l sub k}$ = magnitude of spin on lines
carrying momentum $k$
with $ {m sub k , m' sub k}$ components along
the $z$ axis.
.BE
we would have
.EQ L
B~prop~roman Disc sub
{(p-k) sup 2} B tilde ,
.EN
where
.KS
.EQ L I
B tilde ~==~i ~int~ mark d sup 4
xd sup 4 yd sup 4 ze sup
{ip cdot x+i(y-z) cdot k}
.EN
.EQ L (5)
lineup times~ langle 0|T psi bar sub alpha (x)
phi (y) phi (z) psi sub beta (0)|0 rangle  sub A ,
.EN (5)
.KE
and we could obtain the scaling
behavior of $B$, as
$p sup 2 ~->~inf$, by means of a
Wilson expansion in $B tilde$.
However, in the timelike case,
$p sup 2 ~>~0,~k sup 2 ~>~0$,
it is essential to use differing ``$i epsilon$''
prescriptions for incoming and outgoing
lines carrying momentum $p$ in
(5).$ "" sup 3$
Such a prescription will be obtained if we
appropriately analytically continue a
nonforward scattering amplitude; but
for this a Wilson expansion is not
available.
.PP
Equations of the form in Fig. 3
have been the object of much study by,
e.g., those involved with the multiperipheral model since,
for $k -> ~-k$, they describe
the forward scattering of two protons.
An explicit diagonalization for
general spin, whereby they are reduced to 
one-dimensional integral equations, has been
given by Abarbanel and Saunders$"" sup 4$
for the case $k sup 2 ~<~0,~p sup 2 ~<~0$.
However, the timelike case,
$k sup 2 ~>~0,~p sup 2 ~>~0$,
needed here does not appear to have been set out
explicitly.
Therefore, in Sec. II we give this
diagonalization; we follow Ref. 4
closely and use the same notation where
possible.
For later sections only the fact that
Eq. (7) diagonalizes to Eq. (28) is
needed.
The resulting one-dimensional equations involve
certain transforms $A sup chi$ of the original
amplitudes $A$.
We give an interpretation of $A sup chi$.
.PP
Section III gives [Eq. (35)] the ``new
improved renormalization group equations''$"" sup 5$
for Yukawa theory, a homogeneous form of
the original Callan-Symanzik$"" sup 6,7$
equations.
This means we do not need to appeal to Weinberg's
theorem$"" sup 8$ initially.
This form is essentially the same as that
recently obtained by 't Hooft.$"" sup 9$
It does, unlike Weinberg's better known
version, apply to scalars.
.PP
In Sec. IV we study the limit
$u~->~inf$ for the two-particle
irreducible amplitudes $T$.
According to conventional wisdom,$"" sup 10$
they should behave as if they were not evaluated
at the exceptional momentum $t~=~0$.
We are thus able to reach the key equation
(70):  The transforms
$T sup chi (v, u)$ are sensible
``zero mass'' quantities in this limit; they
can be calculated by setting
$k sup 2 ~==~ v ~=~0~=~M sub F ~=~m sub S$.
.PP
In Sec. V we study the limit
$u~->~inf$ for kernels
$K sup ij$, obtaining an expansion in terms
of functions of the form
.EQ I (6)
f(v)g(u),
.EN (6)
where the $g$ are defined in the
zero-mass theory, satisfy a Callan-Symanzik
equation, and so scale as a fractional
power of $u$ at a fixed point of the
renormalization group.
.ce
.sp
.SH
.ne 5
II. DIAGONALIZATION OF THE BETHE-SALPETER
.ce
EQUATION IN THE TIMELIKE CASE
.sp
.ce
A.  Kinematics
.PP
Consider the generic equation of Fig. 3,
where the notation is appropriate to form
(11) below.  We must start from the
``primeval'' form, in which the lines carry
Greek spinor indices $beta sub 1$
etc.,
.EQ L (7) 
A sub {beta sub 1 beta sub 2 alpha sub 1
alpha sub 2} (k,p)~=~I sub
{beta sub 1 beta sub 2 alpha sub 1 alpha sub 2}
~+~[1/(2 pi ) sup 4 ]~
.EN
.EQ
sum from
{nu sub 1 nu sub 2 mu sub 1 mu sub 2}
~ int ~d sup 4 qA sub
{beta sub 1 beta sub 2 nu sub 1 nu sub 2}
(k,q)S sub {nu sub 1 mu sub 1} (q)
S sub {mu sub 2 nu sub 2} (q)I sub
{mu sub 1 mu sub 2 alpha sub 1 alpha sub 2}
(q,p),
.EN (7)
where $S sub {nu mu} (q)$ is a
full propagator.
We may write, in the case of spin $half$,
.EQ L
S sub {nu sub 1 mu sub 1} ~ mark = ~
sum from {+- , mu}~f sub +- 
(q sup 2 ) u sub {nu sub 1} sup {( mu , +- )} u bar
sub {mu sub 1} sup {( mu , +- )}
.EN
.EQ L (8)
lineup =~sum from {+- , mu}~f sub +-
(q sup 2 )[(-1) sup {mu - half}
u sub {nu sub 1} sup {(- mu , +- )} ]
[(-1) sup {mu - half} u bar sub {mu sub 1}
sup {(- mu , +- )} ],
.EN (8)
where the $f$ are scalar functions of
$q sup 2$, and our spinors
$u sup {( mu , +- )}$ are as
defined in Appendix A and satisfy
.EQ L (9a)
R sub z ( phi )u sup {( mu , epsilon )}
~=~e sup {-i mu phi} u sup {( mu , epsilon )} roman {~~(rotation
~angle~ phi ~about~the}~z~ roman axis),
.EN (9a)
.EQ L (9b)
R sub x ( beta ) u sup {( mu , epsilon )}
~=~sum from {mu '}~d sub {mu mu '} sup half
( beta )u sup {( mu ', epsilon )} roman {~~(rotation~
angle}~ beta ~roman {about~the}~x~roman axis),
.EN (9b)
.EQ L (9c)
u( lambda q)~=~ lambda sup half u(q)~roman
{(for~arbitrary~constant~} lambda ).
.EN (9c)
.PP
We state trivial facts as (8) and (9)
because, although written explicitly here
for spin $half$, the procedure of
Ref. 4 is valid for arbitrary spin.
Equation (9c) is special to spin
$half$ because we wish to ensure that the
$f$ have dimension $-2$.
.PP
In our applications the
$A(k,p),~I(k,p)$ in Eq. (7) will be
absorptive amplitudes defined by
equations such as (4), so
$v~==~k sup 2 ~>~0$, $u~==~p sup 2 ~>~0$.
Necessarily, $u'~==~q sup 2 ~>~0$.
Equation (7) has symmetry under arbitrary Lorentz
transformations of $q$.
Thus three parameters in the integration,
specifying the direction of $q$, may be
factored out by using the theory of the
Lorentz group $roman SL (2,C)$.
Namely, we Fourier-transform with respect to
the representation functions $d sup chi$ of
$roman SL (2,C)$ on the SU(2) subgroup.
.PP
We now note the following.
.PP
(i)  The remainder of this kinematical
part expresses $A$ in standard form (12).
If $LAMBDA ~=~RBR'~ \(mo ~ roman SL (2,C)$,
$R,R'~ \(mo ~ roman SU (2)$,
and $B~==~B( theta )$
is a boost along the $z$ axis we define
.EQ I
A( LAMBDA , v,u)~=~A(k sub s ,
LAMBDA p sub s ),
.EN
.EQ I
A(v,u, theta )~=~A(k sub s ,B p sub s ),
.EN
and have
.KS
.EQ I
A sub {J sub k M sub k J sub p M sub p}
( LAMBDA ,v,u)~=~sum from M,M' ~mark d sub
{MM sub k} sup {J sub k} (R)d sub {M sub p M'}
sup {J sub p} (R')
.EN
.EQ I
lineup times~A sub {J sub k MJ sub p M'}
(v,u, theta ),
.EN
.KE
which expresses that A in the form (12) is an
``SU(2) bicovariant distribution.''  Here
$p sub s ~=~u sup half (1,0,0,0)$ is ``at rest.''
.PP
(ii) The remainder also transforms (7) into (17),
where the dependence on SU(2)
(rotations) is explicitly factored out.
The subsequent Fourier transform will
factor out the dependence on boosts
$theta$.
We now form ``spin projected'' amplitudes,
.KS
.EQ L
A sub {m sub k m' sub k m sub p m' sub p} ~=~
sum from {beta sub 1 beta sub 2 alpha sub 1 alpha sub 2}~
mark u bar sub {beta sub 1} sup {(m sub k )} (-1)
sup {(1/2-m' sub k )} u sub {beta sub 2} sup
{(-m' sub k )}
.EN
.EQ L (10)
~~~~ times ~A sub {beta sub 1 beta sub 2 alpha sub 1
alpha sub 2} u sub {alpha sub 1} sup {(m sub p )} (-1)
sup {( half -m' sub p )} u bar sub {alpha sub 2} sup
{(-m' sub p )} ,
.EN (10)
.KE
where factors $(-1) sup {half -m}$
have arisen because we wish to consider
the $t$-channel angular momentum;
we have suppressed $epsilon$
dependence.

et.demo         627314299   9     1     100666  4566      `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.demo:
.sp
.ps 9
.EQ 2
gfont I
size 20{
roman det | roman{A- lambda cdot I}|= 
pile{n above size 24 PI above i=1} lambda sub i
}
.EN
.EQ 3
e sup -x sup 2 + e sup -x sub i sup 2 + e sup{-x sub i}sup 2
~~~~
{sum from i=0 to inf} over {2 pi}
{int int} from {- inf} to {+ inf}
   e sup{-{x sub i sup 2 + y sub i sup 2}over 2}
= e sup{- x over y}
~~~~~~
a over b = c over d = A over B times C over D
.EN
.EQ 6
P(x) = pile{x sub 2 above sum above x=x sub 1}
C sub x p sup x (1-p) sup n-x =
pile{x sub 2 above sum  above x=x sub 1}
C sub x p sup x q sup n-x
~~~~~
sum from i=0 to {i= inf} 1 over{2 sup n + 2 sup N}= 2
.EN
.EQ 8
B sub a sub 2 +
B sub a sup 2 +{B sub a}sup 2 + (B sub a ) sup 2 + (B sup 2 ) sub a
+B sup 2 sup x
+B sub a sub i +
B sub a sup i +{B sub a}sup i + (B sub a ) sup i + (B sup i ) sub a
+B sup i sup x
.EN
.EQ 9
c sub a sub 2 +
c sub a sup 2 +{c sub a}sup 2 + (c sub a ) sup 2 + (c sup 2 ) sub a
+c sup 2 sup x
+c sub a sub i +
c sub a sup i +{c sub a}sup i + (c sub a ) sup i + (c sup i ) sub a
+c sup i sup x
.EN
.EQ 8
 PI sub a sub 2 +
 PI sub a sup 2 +{ PI sub a}sup 2 + ( PI sub a ) sup 2 + ( PI sup 2 ) sub a
+ PI sup 2 sup x
+ PI sub a sub i +
 PI sub a sup i +{ PI sub a}sup i + ( PI sub a ) sup i + ( PI sup i ) sub a
+ PI sup i sup x
.EN
.EQ 9
 pi sub a sub 2 +
 pi sub a sup 2 +{ pi sub a}sup 2 + ( pi sub a ) sup 2 + ( pi sup 2 ) sub a
+ pi sup 2 sup x
+ pi sub a sub i +
 pi sub a sup i +{ pi sub a}sup i + ( pi sub a ) sup i + ( pi sup i ) sub a
+ pi sup i sup x
.EN
.EQ 10
a sub 0 + b sub 1 over
{a sub 1 + b sub 2 over
 {a sub 2 + b sub 3 over
  {a sub 3 + ...}
 }
}
~~~~~
{a over b + c over d} sup{x over y}over 89
+{{t times 32}over h-8}sub 2
.EN
.EQ
x = a sup 2 + sqrt a sup 2 + sqrt a
~~~
x = sqrt{a sup 2 + b sup 2}+ sqrt a over b +
sqrt a sup 2 over b sup 2
~~~
sqrt a+b over sqrt c+d
~~~
1 over sqrt{ax sup 2 +bx+c}
.EN
.EQ
roman erf (z) ~=~ 2 over sqrt pi int sub 0 sup z e sup -t sup 2 dt
~~~
zeta (s) ~=~ sum from k=1 to inf k sup -s ~~~ ( Re~ s > 1)
~~~
lim from {x -> inf} left ( 1 + 1 over x right ) sup x ~=~ e
~~~
x dotdot ~=~ y bar
~~~
max from 1<=n<=m log sub 2 P sub n
.EN
.EQ
union sub i ~~ union sup i ~~ union sub i sup 2 ~~ union sup {pi over 2}
~~~ union sup {i sub 2}
~~~
int sub i ~~ int sup i ~~ int sub i sup 2 ~~ int sup {pi over 2}
~~~ int sup {i sub 2}
.EN
.sp
.ps 10
.EQ 3
e sup -x sup 2 + e sup -x sub i sup 2 + e sup{-x sub i}sup 2
~~~~
{sum from i=0 to inf} over {2 pi}
{int int} from {- inf} to {+ inf}
   e sup{-{x sub i sup 2 + y sub i sup 2}over 2}
= e sup{- x over y}
~~~~~~
a over b = c over d = A over B times C over D
.EN
.EQ 6
P(x) = pile{x sub 2 above sum above x=x sub 1}
C sub x p sup x (1-p) sup n-x =
pile{x sub 2 above sum  above x=x sub 1}
C sub x p sup x q sup n-x
~~~~~
sum from i=0 to {i= inf} 1 over{2 sup n + 2 sup N}= 2
.EN
.EQ 8
B sub a sub 2 +
B sub a sup 2 +{B sub a}sup 2 + (B sub a ) sup 2 + (B sup 2 ) sub a
+B sup 2 sup x
+B sub a sub i +
B sub a sup i +{B sub a}sup i + (B sub a ) sup i + (B sup i ) sub a
+B sup i sup x
.EN
.EQ 9
c sub a sub 2 +
c sub a sup 2 +{c sub a}sup 2 + (c sub a ) sup 2 + (c sup 2 ) sub a
+c sup 2 sup x
+c sub a sub i +
c sub a sup i +{c sub a}sup i + (c sub a ) sup i + (c sup i ) sub a
+c sup i sup x
.EN
.EQ 8
 PI sub a sub 2 +
 PI sub a sup 2 +{ PI sub a}sup 2 + ( PI sub a ) sup 2 + ( PI sup 2 ) sub a
+ PI sup 2 sup x
+ PI sub a sub i +
 PI sub a sup i +{ PI sub a}sup i + ( PI sub a ) sup i + ( PI sup i ) sub a
+ PI sup i sup x
.EN
.EQ 9
 pi sub a sub 2 +
 pi sub a sup 2 +{ pi sub a}sup 2 + ( pi sub a ) sup 2 + ( pi sup 2 ) sub a
+ pi sup 2 sup x
+ pi sub a sub i +
 pi sub a sup i +{ pi sub a}sup i + ( pi sub a ) sup i + ( pi sup i ) sub a
+ pi sup i sup x
.EN
.EQ 10
a sub 0 + b sub 1 over
{a sub 1 + b sub 2 over
 {a sub 2 + b sub 3 over
  {a sub 3 + ...}
 }
}
~~~~~
{a over b + c over d} sup{x over y}over 89
+{{t times 32}over h-8}sub 2
.EN
.EQ
x = a sup 2 + sqrt a sup 2 + sqrt a
~~~
x = sqrt{a sup 2 + b sup 2}+ sqrt a over b +
sqrt a sup 2 over b sup 2
~~~
sqrt a+b over sqrt c+d
~~~
1 over sqrt{ax sup 2 +bx+c}
.EN
.EQ
roman erf (z) ~=~ 2 over sqrt pi int sub 0 sup z e sup -t sup 2 dt
~~~
zeta (s) ~=~ sum from k=1 to inf k sup -s ~~~ ( Re~ s > 1)
~~~
lim from {x -> inf} left ( 1 + 1 over x right ) sup x ~=~ e
~~~
x dotdot ~=~ y bar
~~~
max from 1<=n<=m log sub 2 P sub n
.EN
.EQ
union sub i ~~ union sup i ~~ union sub i sup 2 ~~ union sup {pi over 2}
~~~ union sup {i sub 2}
~~~
int sub i ~~ int sup i ~~ int sub i sup 2 ~~ int sup {pi over 2}
~~~ int sup {i sub 2}
.EN
et.diac         627314405   9     1     100666  6573      `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.diac:
.nf
.sp 1i
.ft CW
now is the time
.EQ
x tilde ~ X tilde
.EN
for all good men
.ft R
.EQ
~~~x tilde ~ X tilde
.EN
to come to the party.
.vs 18p
.br
.EQ
gfont I
( x dyad ) ~~
( x vec ) ~~
( x bar ) ~~
( x hat ) ~~
( x dot ) ~~
( x dotdot ) ~~
( x tilde ) ~~
( x under ) ~~
( x utilde ) ~~
.EN
.EQ
( X dyad ) ~~
( X vec ) ~~
( X bar ) ~~
( X hat ) ~~
( X dot ) ~~
( X dotdot ) ~~
( X tilde ) ~~
( X under ) ~~
( X utilde ) ~~
.EN
.EQ
( alpha dyad ) ~~
( alpha vec ) ~~
( alpha bar ) ~~
( alpha hat ) ~~
( alpha dot ) ~~
( alpha dotdot ) ~~
( alpha tilde ) ~~
( alpha under ) ~~
( alpha utilde ) ~~
.EN
.EQ
( phi dyad ) ~~
( phi vec ) ~~
( phi bar ) ~~
( phi hat ) ~~
( phi dot ) ~~
( phi dotdot ) ~~
( phi tilde ) ~~
( phi under ) ~~
( phi utilde ) ~~
.EN
.EQ
( GAMMA dyad ) ~~
( GAMMA vec ) ~~
( GAMMA bar ) ~~
( GAMMA hat ) ~~
( GAMMA dot ) ~~
( GAMMA dotdot ) ~~
( GAMMA tilde ) ~~
( GAMMA under ) ~~
( GAMMA utilde ) ~~
.EN
.EQ
gfont R
( x dyad ) ~~
( x vec ) ~~
( x bar ) ~~
( x hat ) ~~
( x dot ) ~~
( x dotdot ) ~~
( x tilde ) ~~
( x under ) ~~
( x utilde ) ~~
( X dyad ) ~~
( X vec ) ~~
( X bar ) ~~
( X hat ) ~~
( X dot ) ~~
( X dotdot ) ~~
( X tilde ) ~~
( X under ) ~~
( X utilde ) ~~
.EN
.EQ
gfont B
( x dyad ) ~~
( x vec ) ~~
( x bar ) ~~
( x hat ) ~~
( x dot ) ~~
( x dotdot ) ~~
( x tilde ) ~~
( x under ) ~~
( x utilde ) ~~
( X dyad ) ~~
( X vec ) ~~
( X bar ) ~~
( X hat ) ~~
( X dot ) ~~
( X dotdot ) ~~
( X tilde ) ~~
( X under ) ~~
( X utilde ) ~~
.EN
.sp
.nf
.vs 18p
.EQ
gfont I
( x dyad  sub i ) ~~
( x vec  sub i ) ~~
( x bar  sub i ) ~~
( x hat  sub i ) ~~
( x dot  sub i ) ~~
( x dotdot  sub i ) ~~
( x tilde  sub i ) ~~
( x under  sub i ) ~~
( x utilde  sub i ) ~~
.EN
.EQ
( X dyad  sub i ) ~~
( X vec  sub i ) ~~
( X bar  sub i ) ~~
( X hat  sub i ) ~~
( X dot  sub i ) ~~
( X dotdot  sub i ) ~~
( X tilde  sub i ) ~~
( X under  sub i ) ~~
( X utilde  sub i ) ~~
.EN
.EQ
( alpha dyad  sub i ) ~~
( alpha vec  sub i ) ~~
( alpha bar  sub i ) ~~
( alpha hat  sub i ) ~~
( alpha dot  sub i ) ~~
( alpha dotdot  sub i ) ~~
( alpha tilde  sub i ) ~~
( alpha under  sub i ) ~~
( alpha utilde  sub i ) ~~
.EN
.EQ
( phi dyad  sub i ) ~~
( phi vec  sub i ) ~~
( phi bar  sub i ) ~~
( phi hat  sub i ) ~~
( phi dot  sub i ) ~~
( phi dotdot  sub i ) ~~
( phi tilde  sub i ) ~~
( phi under  sub i ) ~~
( phi utilde  sub i ) ~~
.EN
.EQ
( GAMMA dyad  sub i ) ~~
( GAMMA vec  sub i ) ~~
( GAMMA bar  sub i ) ~~
( GAMMA hat  sub i ) ~~
( GAMMA dot  sub i ) ~~
( GAMMA dotdot  sub i ) ~~
( GAMMA tilde  sub i ) ~~
( GAMMA under  sub i ) ~~
( GAMMA utilde  sub i ) ~~
.EN
.EQ
gfont R
( x dyad  sub i ) ~~
( x vec  sub i ) ~~
( x bar  sub i ) ~~
( x hat  sub i ) ~~
( x dot  sub i ) ~~
( x dotdot  sub i ) ~~
( x tilde  sub i ) ~~
( x under  sub i ) ~~
( x utilde  sub i ) ~~
( X dyad  sub i ) ~~
( X vec  sub i ) ~~
( X bar  sub i ) ~~
( X hat  sub i ) ~~
( X dot  sub i ) ~~
( X dotdot  sub i ) ~~
( X tilde  sub i ) ~~
( X under  sub i ) ~~
( X utilde  sub i ) ~~
.EN
.EQ
gfont B
( x dyad  sub i ) ~~
( x vec  sub i ) ~~
( x bar  sub i ) ~~
( x hat  sub i ) ~~
( x dot  sub i ) ~~
( x dotdot  sub i ) ~~
( x tilde  sub i ) ~~
( x under  sub i ) ~~
( x utilde  sub i ) ~~
( X dyad  sub i ) ~~
( X vec  sub i ) ~~
( X bar  sub i ) ~~
( X hat  sub i ) ~~
( X dot  sub i ) ~~
( X dotdot  sub i ) ~~
( X tilde  sub i ) ~~
( X under  sub i ) ~~
( X utilde  sub i ) ~~
.EN
.sp
.nf
.vs 18p
.EQ
gfont I
( x dyad  sub i sup 2 ) ~~
( x vec  sub i sup 2 ) ~~
( x bar  sub i sup 2 ) ~~
( x hat  sub i sup 2 ) ~~
( x dot  sub i sup 2 ) ~~
( x dotdot  sub i sup 2 ) ~~
( x tilde  sub i sup 2 ) ~~
( x under  sub i sup 2 ) ~~
( x utilde  sub i sup 2 ) ~~
.EN
.EQ
( X dyad  sub i sup 2 ) ~~
( X vec  sub i sup 2 ) ~~
( X bar  sub i sup 2 ) ~~
( X hat  sub i sup 2 ) ~~
( X dot  sub i sup 2 ) ~~
( X dotdot  sub i sup 2 ) ~~
( X tilde  sub i sup 2 ) ~~
( X under  sub i sup 2 ) ~~
( X utilde  sub i sup 2 ) ~~
.EN
.EQ
( alpha dyad  sub i sup 2 ) ~~
( alpha vec  sub i sup 2 ) ~~
( alpha bar  sub i sup 2 ) ~~
( alpha hat  sub i sup 2 ) ~~
( alpha dot  sub i sup 2 ) ~~
( alpha dotdot  sub i sup 2 ) ~~
( alpha tilde  sub i sup 2 ) ~~
( alpha under  sub i sup 2 ) ~~
( alpha utilde  sub i sup 2 ) ~~
.EN
.EQ
( phi dyad  sub i sup 2 ) ~~
( phi vec  sub i sup 2 ) ~~
( phi bar  sub i sup 2 ) ~~
( phi hat  sub i sup 2 ) ~~
( phi dot  sub i sup 2 ) ~~
( phi dotdot  sub i sup 2 ) ~~
( phi tilde  sub i sup 2 ) ~~
( phi under  sub i sup 2 ) ~~
( phi utilde  sub i sup 2 ) ~~
.EN
.EQ
( GAMMA dyad  sub i sup 2 ) ~~
( GAMMA vec  sub i sup 2 ) ~~
( GAMMA bar  sub i sup 2 ) ~~
( GAMMA hat  sub i sup 2 ) ~~
( GAMMA dot  sub i sup 2 ) ~~
( GAMMA dotdot  sub i sup 2 ) ~~
( GAMMA tilde  sub i sup 2 ) ~~
( GAMMA under  sub i sup 2 ) ~~
( GAMMA utilde  sub i sup 2 ) ~~
.EN
.EQ
gfont R
( x dyad  sub i sup 2 ) ~~
( x vec  sub i sup 2 ) ~~
( x bar  sub i sup 2 ) ~~
( x hat  sub i sup 2 ) ~~
( x dot  sub i sup 2 ) ~~
( x dotdot  sub i sup 2 ) ~~
( x tilde  sub i sup 2 ) ~~
( x under  sub i sup 2 ) ~~
( x utilde  sub i sup 2 ) ~~
( X dyad  sub i sup 2 ) ~~
( X vec  sub i sup 2 ) ~~
( X bar  sub i sup 2 ) ~~
( X hat  sub i sup 2 ) ~~
( X dot  sub i sup 2 ) ~~
( X dotdot  sub i sup 2 ) ~~
( X tilde  sub i sup 2 ) ~~
( X under  sub i sup 2 ) ~~
( X utilde  sub i sup 2 ) ~~
.EN
.EQ
gfont B
( x dyad  sub i sup 2 ) ~~
( x vec  sub i sup 2 ) ~~
( x bar  sub i sup 2 ) ~~
( x hat  sub i sup 2 ) ~~
( x dot  sub i sup 2 ) ~~
( x dotdot  sub i sup 2 ) ~~
( x tilde  sub i sup 2 ) ~~
( x under  sub i sup 2 ) ~~
( x utilde  sub i sup 2 ) ~~
( X dyad  sub i sup 2 ) ~~
( X vec  sub i sup 2 ) ~~
( X bar  sub i sup 2 ) ~~
( X hat  sub i sup 2 ) ~~
( X dot  sub i sup 2 ) ~~
( X dotdot  sub i sup 2 ) ~~
( X tilde  sub i sup 2 ) ~~
( X under  sub i sup 2 ) ~~
( X utilde  sub i sup 2 ) ~~
.EN
.sp
.EQ
123 over x ~123 over x hat ~ 123 over x bar ~ 123 over x dot
~~~~~
123 over X ~123 over X hat ~ 123 over X bar ~ 123 over X dot
.EN

.EQ
gfont I
W + W bar + {W sub a} bar + W vec + W dot +
~~~~~
w + w bar + {w sub a} bar + w vec + w dot +
.EN

.EQ
gfont R
.EN
.EQ
W + W bar + {W sub a} bar + W vec + W dot +
~~~~~
w + w bar + {w sub a} bar + w vec + w dot +
.EN

.EQ
gfont B
W + W bar + {W sub a} bar + W vec + W dot +
~~~~~
w + w bar + {w sub a} bar + w vec + w dot +
.EN
.EQ
gfont 2
.EN
.nf
.EQ
x ~ x bar ~ x bar bar ~ x dot ~ x dot bar ~ x dot bar bar
~~~~
X ~ X bar ~ X bar bar ~ X dot ~ X dot bar ~ X dot bar bar
~~~~
x sup 2 ~ x sup 2 bar ~ {x sup 2} bar ~ {x bar sup 2} bar
~~~~
X sup 2 ~ X sup 2 bar ~ {X sup 2} bar ~ {X bar sup 2} bar
.EN

et.doug         627314300   9     1     100666  2256      `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.doug:
.nf
.EQ
gfont I
define BR "bold r"
define r0 "bold r sub 0"
define cm "{ roman cosh ~ mu }"
define m0 "mu sub 0"
define c0 "{ roman cosh ~ m0 }"
.EN
.EQ
G( BR | r0 | omega ) ~=~
G sub k ( BR | r0 ) ~=~
i pi H sub 0 sup 1 (kR)
.EN
.br
.EQ
~~~~~~~~~~~~~=~ 4 pi i ~ left {
sum from m=0 to inf 
left [ { Se sub m (h,~~ cos ~ theta sub 0 ) }
 over { M sub m sup e (h) } right ] ~
Se sub m (h,~ cos ~ theta ) .
.EN
.in 1.3i
.EQ
. ~ left { pile
 { Je sub m (h,~ c0 ) He sub m (h,~ cm ) ) ; 
 above
  Je sub m (h,~ cm ) He sub m (h,~ c0 ); }
~~ pile { mu ~>~ m0 
 above  m0 ~>~ mu }
.EN
.in 1i
.EQ
+~ sum from m=1 to inf left [
 { So sub m (h,~ cos ~ theta sub 0 ) }
 over { M sub m sup 0 (h) } right ] ~ .
.EN
.in 1.3i
.EQ
. ~ left "" ~  { left { pile
 { Jo sub m ( h,~ c0 ) Ho sub m (h,~ cm ); 
 above
  Jo sub m (h,~ cm ) Ho sub m (h,~ c0 ); } 
~~ pile { mu ~>~ m0 
 above  m0 ~>~ mu }
} right }
.EN
.in 0
.EQ
r(k)~=~-~ { PHI sub + (k) }
 over { PHI sub + (-k) } ~=~
{ (k-k sub 0 ) } over { (k+ k sub 0 ) }
size 28 prod from n=1 to inf
{ left [ sqrt { 1- left ( ka over { pi n } right ) sup 2 }
 - i left ( ka over { pi n } right ) right ]
over left [ sqrt { 1 - left ( ka over { pi n } right ) sup 2 }
 + i left ( ka over { pi n } right ) right ] }
~e sup { 2iak/ pi n } .
.EN
.in +1i
.EQ
. ~ size 28 prod from m=1 to inf {
 left [ sqrt { 1 - left ( ka over { pi mu sub m } right ) }
 + i left ( ka over { pi mu sub m }  right ) right ]
 over
 left [ sqrt { 1 - left ( ka over { pi mu sub m } right ) sup 2 }
 - i left ( ka over { pi mu sub m } right ) right ] }
~e sup { -2iak/ pi m }
.EN
.in 0
.sp
.nf
.EQ
x = left { lpile { a above pile { b above c above d} }
right }
.EN
.EQ
x = left [ lpile { a above pile { b above c above d} }
right ]
.EN
.sp 1i
.EQ
delim $$
define NMO `~"\(mo\s+3\h'-\w'/'u'/\s-3"~`
.EN
.LP
.EQ (3.6a)
lambda sub i ~:=~ left { ~ lpile {
left ( C sub 0 sup -T grad f ( x sup c ) right ) sub j
~if~ C sub i ~roman {is~row}~ j ~roman of~ C sub 0
above ^0 ~if~ i NMO A sub 0 ( x sup c ) .}
right }
.EN
.EQ (7.2)
s tilde sup k ~:=~ left { ~ lpile {bold 0 ~if~ Z~ roman {is~null~or}
~Z sup T g~=~ bold 0
above -{Z Z sup T g} over {|| Z Z sup T g || sub 2}~^ roman otherwise }
right }
.EN
et.fat          627314300   9     1     100666  206       `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.fat:
.nf
.EQ
gfont I
x sub i ~~ fat {x sub i} ~~ grad ~~ fat grad
~~ x sub fat i ~~ fat lambda  ~~ fat partial
.EN
.EQ
gfont B
x ~~ fat x ~~ fat {x sub i}
.EN
et.int          627314300   9     1     100666  2160      `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.int:
.if n .ls 2
.nf
.EQ
gfont I
delim $$
.EN
.ta 1i
.nf


Gamma	$GAMMA (z) ~~=~~ int sub 0 sup inf  t sup {z-1} e sup -t dt$
Error	$ roman erf (z) = 2 over sqrt pi int sub 0 sup z e sup {-t sup 2} dt$
.nf
.EQ
int
~~~~ int sub 0 sup pi ~~ int sub {- pi} sup pi ~~ int sub {-2 pi} sup {2 pi} f(x)dx
.EN
XXXXXX
.EQ
int sub 0 sup 1
~~~~ int sub 0 sup pi ~~ int sub {- pi} sup pi ~~ int sub {-2 pi} sup {2 pi} f(x)dx
.EN
XXXXXXXXX
.EQ
int from 0 to 1
~~~~ int sub 0 sup pi ~~ int sub {- pi} sup pi ~~ int sub {-2 pi} sup {2 pi} f(x)dx
.EN
XXXXXXXX
.EQ
= int int =
~~~~ int sub 0 ~~ int sup pi ~~ int sub i ~~ int sup k f(x)dx
.EN
.EQ
= int int =
.EN
xxxxx
.EQ
PI
~~~~ PI sub 0 sup pi ~~ PI sub {- pi} sup pi ~~ PI sub {-2 pi} sup {2 pi} f(x)dx
.EN
xxxx
.EQ
PI sub x sup x ~~ PI sub 1 sup 1 ~~
PI sub -1 sup 1 ~~ PI sub 1 sup 2 ~~ PI sub x sup 1
.EN
.ps 9
.EQ
gsize 9
.EN
.EQ L
lineup + ~ sum ~ GAMMA sub r over 2 ~ PI sub
{x sub n-k+1} sup
{roman min left ( x sub n-k , x sub n + {2E sub n} over {GAMMA sub r} ~
{a sub i} over {1-a sub i} right )} ~dx
.EN
xxxxx
.if n .ls 2
.nf
.EQ
delim $$
.EN
.ta 1i
.nf
Gamma	$GAMMA (z) ~~=~~ PI sub 0 sup inf  t sup {z-1} e sup -t dt$
Error	$ roman erf (z) = 2 over sqrt pi PI sub 0 sup z e sup {-t sup 2} dt$
.nf
.EQ
PI
~~~~ PI sub 0 sup pi ~~ PI sub {- pi} sup pi ~~ PI sub {-2 pi} sup {2 pi} f(x)dx
.EN
XXXXXX
.EQ
PI sub 0 sup 1
~~~~ PI sub 0 sup pi ~~ PI sub {- pi} sup pi ~~ PI sub {-2 pi} sup {2 pi} f(x)dx
.EN
XXXXXXXXX
.EQ
PI from 0 to 1
~~~~ PI sub 0 sup pi ~~ PI sub {- pi} sup pi ~~ PI sub {-2 pi} sup {2 pi} f(x)dx
.EN
XXXXXXXX
.EQ
= PI PI =
~~~~ PI sub 0 sup pi ~~ PI sub {- pi} sup pi ~~ PI sub {-2 pi} sup {2 pi} f(x)dx
.EN
.EQ
= PI PI =
.EN
xxxxx
.EQ
PI
~~~~ PI sub 0 sup pi ~~ PI sub {- pi} sup pi ~~ PI sub {-2 pi} sup {2 pi} f(x)dx
.EN
xxxx
.EQ
PI sub x sup x ~~ PI sub 1 sup 1 ~~
PI sub -1 sup 1 ~~ PI sub 1 sup 2 ~~ PI sub x sup 1
.EN
.ps 9
.EQ
gsize 9
.EN
.EQ L
lineup + ~ sum ~ GAMMA sub r over 2 ~ PI sub
{x sub n-k+1} sup
{roman min left ( x sub n-k , x sub n + {2E sub n} over {GAMMA sub r} ~
{a sub i} over {1-a sub i} right )} ~dx
.EN
.EQ
gsize 10
.EN
et.k92          627314300   9     1     100666  780       `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.k92:
.nf
Knuth, vol  1, p92:
.sp
.EQ
gfont I
G(z)~mark =~ e sup { ln ~ G(z) }
~=~ exp left ( 
sum from k>=1 {S sub k z sup k} over k right )
~=~  prod from k>=1 e sup {S sub k z sup k /k}
.EN
.sp
.EQ
lineup =~ left ( 1 + S sub 1 z + 
{ S sub 2 sup 1 z sup 2 } over 2! + ... right )
left ( 1+ { S sub 2 z sup 2 } over 2
+ { S sub 2 sup 2 z sup 4 } over { 2 sup 2 . 2! }
+ ... right ) ...
.EN
.sp
.EQ
lineup =~  sum from m>=0 left (
sum from
pile { k sub 1 ,k sub 2 , ... ,k sub m  >=0
  above
k sub 1 +2k sub 2 + ... +mk sub m =m}
{ S sub 1 sup {k sub 1} } over {1 sup k sub 1 k sub 1 ! } ~
{ S sub 2 sup {k sub 2} } over {2 sup k sub 2 k sub 2 ! } ~
...
{ S sub m sup {k sub m} } over {m sup k sub m k sub m ! } 
right ) z sup m
.EN
et.lax          627314300   9     1     100666  1334      `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.lax:
.sp
.vs 18p
.EQ
gfont I
delim off
.EN
.EQ (2.01)
bold x sup { n alpha } (t) ~->~ bold x sup alpha ( bold X ,t).
.EN
.sp
.EQ (2.02)
sum from n F( bold x sup { n alpha } (t))
~->~ 1 over OMEGA int F( bold x sup alpha ( bold X ,t))d bold X
.EN
.EQ (2.03)
bold x ( bold X ,t) ~==~
sum from  { alpha =1} to  N
rho sup alpha  over rho sup 0 bold x sup alpha ( bold X ,t)
.EN
.EQ (2.08)
sum from  {alpha =1} to  N
U sup { mu alpha } V sup { mu alpha } ~=~ delta sup { mu nu }
.EN
.EQ (2.06)
bold y sup { T mu } ( bold X ,t) 
~==~ sum from  {alpha =1} to  N
U sup { mu alpha }
bold x sup alpha
( bold X ,t)
.EN
.EQ  (7.02)
~ partial over {partial d} 
 ( epsilon sub 0 bold E sup T times  bold B ) sub i  
- m sub ij,j ~=~
-q sup D E sub i sup T
-( bold j sup D times bold B ) sub i
.EN
.EQ (7.04)
~ partial over {partial d} 
[ rho x dot sub i + epsilon sub 0 ( bold E sup T times bold B ) sub i ]
~+~ partial over \(pdz sub j
[ rho x dot sub i x dot sub j -t sub ij sup L
- E hat sub i sup T P sub j sup T -m sub ij ]~=~0
.EN
.EQ
M sub { k ' k } sup { n ' n } ( r vec sub 0 ) ~=~
1 over A int
e sup { -i k vec ' cdot rho vec }
F sub { n ' } (z) sup *
{ e sup { - lambda ( r vec - r vec sub 0 ) } } over
{ | r vec - r vec sub 0 | }
e sup { i k vec cdot l vec }
F sub n (z) d l vec dz
.EN A2
et.mark         627314300   9     1     100666  171       `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.mark:
.nf
.EQ
gfont I
	x mark = 1
.EN
.EQ
lineup = 2
.EN
.EQ
1 lineup = 2
.EN
.EQ
ij lineup =3
.EN
.EQ
bold k lineup =4
.EN

et.matrix       627314300   9     1     100666  2596      `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.matrix:
.sp .5i
Knuth, vol 2, page 317:
.sp
.EQ 
gfont I
Q sub n (x sub 1 ,x sub 2 , ... ,x sub n ) ~=~ left {
matrix {
lcol { 1, above x sub 1 , above 
x sub 1 Q sub n-1 (x sub 2 , ... ,x sub n ) +
Q sub n-2 (x sub 3 , ... ,x sub n ) }
lcol {  if above  if above  if }
lcol { n=0; above n=1; above n>1. }
}
.EN
.sp
Knuth, vol 2, p426:
.sp
.ti 3
.nf
.EQ
det ~
left [ 
matrix {
col { 0 above x sub 21 above x sub 31 above ...  above x sub n1 }
col { x sub 12 above x sub 22 above x sub 32 above ~ above x sub n2 }
col { ...  above ...  above ...  above ~ above ...  }
col { x sub 1n above x sub 2n above x sub 3n above ~ above x sub nn }
}
right ]
.EN
.sp
.ti 5
.EQ
=~-x sub 21 det
left [
matrix {
col { 
x sub 12 above x sub 32 -(x sub 31 /x sub 21 )x sub 22
above ... sub ""  above x sub n2 -(x sub n1 /x sub 21 )x sub 22 }
col { ...  above ...  above ~ above ...  }
col {
x sub 1n above x sub 3n -(x sub 31 /x sub 21 )x sub 2n
above ...  above x sub nn -(x sub n1 /x sub 21 )x sub 2n
   }
}
right ]
~~.~~~(8)
.EN

.nf
From John Butcher:
.EQ
A~=~ left [
matrix {
 ccol { a sub 11 above 0 above 0 above 0 above cdot above cdot above cdot above 0 above a sub ni }
 ccol { a sub 12 above a sub 22 above a sub 32 above 0  above cdot above cdot above cdot  above 0 above 0 }
 ccol { 0 above a sub 23 above a sub 33 above a sub 43 above cdot above cdot above cdot above 0 above 0 }
 ccol { 0 above 0 above a sub 34 above a sub 44 above cdot above cdot above cdot above 0 above 0 }
 ccol { cdot above cdot above cdot above cdot above nothing above nothing above nothing above cdot above cdot  }
 ccol { cdot above cdot above cdot above cdot above nothing above nothing above nothing above cdot above cdot  }
 ccol { cdot above cdot above cdot above cdot above nothing above nothing above nothing above cdot above cdot  }
 ccol {0 above 0 above 0 above 0 above cdot above cdot above cdot above a sub n-1,n-1 above a sub n,n-1 }
 ccol {0 above 0 above 0 above 0 above cdot above cdot above cdot above a sub n-1,n above a sub nn }
}
right ]~=
.EN
.nf

.EQ
X~=~ left [
lpile { A above B above C above D above E above F above G above H} ~~~
lpile { I above J above K above L above M above N above O above P} ~~~
lpile { Q above R above S above T above U above V above X above Y} 
right ] ~ finis
.EN


From Carolyn Schmidt:

.EQ
matrix {
  rcol { "" above rpile { s above Calculated~u above v} }
  ccol { s ~~ u ~~ v
    above left [
    matrix {
    ccol {0 above 1 above 1}
    ccol {1 above 0 above 1}
    ccol {1 above 1 above 1}
    }
  right ]
  }
}
.EN
et.mini         627314300   9     1     100666  451       `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.mini:
.nf
.EQ
gfont I
x
.EN
.sp
.EQ
alpha ~ beta ~ sum ~ int ~ pi ~ partial
.EN
.sp
.EQ
x sub i
.EN
.sp
.EQ
x sub i sup k
.EN
.sp
.EQ
a over bc
.EN
.sp
.EQ
a over b+c
.EN
.sp
.EQ
x sup 2 over a sup 2 ~=~ y sup 2 over b sup 2
.EN
.sp
.EQ
sum from i=0 to n x
.EN
.sp
.EQ
pile {a above b above c}
.EN
.sp
.EQ
left [
cpile {abcdef above b above cd}
right ]
.EN
.sp
.EQ
sqrt x ~~~ sqrt {ax sup 2  + bx+c}
.EN

et.motion       627314300   9     1     100666  906       `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.motion:
.EQ
gfont I
delim $$
.EN
.nf
.vs 20p
int sub 0 sup inf	$ int sub 0 sup inf$
int sub back 30 down 30 0 sup up 40 inf	$ int sub back 30 down 30 0 sup up 40 inf$
int sub back 30 down 30 size 7 0 sup up 40 size 7 inf	$ int sub back 30 down 30 size 7 0 sup up 40 size 7 inf$
.sp 2
.sp 2
int from 0 to 1	$int from 0 to 1$
int from back 100 0 to fwd 100 1	$int from back 100 0 to fwd 100 1$
int from back 150 0 to fwd 150 1	$int from back 150 0 to fwd 150 1$
$x up 9 y$
.nf
.EQ
gsize 9
define solid % "\b'\(bv\(bv'" %
define dotted % "\s7\b'\(or\(or\(or'\s0" %
.EN
\l'3i'
.EQ (20)
solid from { down 60 {u sub n} } ~~ solid from { down 60 {u sub n-1}} ~~ ... ~~
solid from { down 60 {u sub {n-k sub i +1}}} ~~ fat dotted from { down 60 {u- epsilon sub i}}
~~ solid from { down 60 {u sub n-k sub i}} ~~ (k sub i ~ roman defined ) ,
.EN
\l'3i'
.EQ
gsize 10
.EN
et.over         627314300   9     1     100666  724       `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.over:
.vs 20p
.EQ
gfont I
+ a over b +
~~~
+ ab over c +
~~~
+ a over bc +
~~~
+ ab over cd +
~~~
+ abc over d
~~~
+ a over bcd +
~~~
+ ab over cdef +
~~~
+ ab over cdefg +
.EN
.nf
XXXXXX
.EQ
1 over 2
.EN
XXXXXX
.EQ
123 over 345
.EN
XXXXXXX

.EQ
=~a over b ~=~ a over b over c ~=~
a over b over c over d ~=~ {a over b} over {c over d} ~=
.EN
.EQ
=~1 over 2 ~=~ 1 over 2 over 3 ~=~
1 over 2 over 3 over 4 ~=~ {1 over 2} over {3 over 4} ~=
.EN
.nf
.EQ
size -2 {0 over 1 ,~1 over 7 ,~ 1 over 6 ,~1 over 5 ,~1 over 4 ,~2 over 7 ,
~1 over 3 ,~2 over 5 ,~3 over 7 ,~1 over 2 ,~4 over 7 ,~3 over 5 ,
~2 over 3 ,~5 over 7 ,~3 over 4 ,~4 over 5 ,~5 over 6 ,~6 over 7 ,~1 over 1} .
.EN

et.prime        627314300   9     1     100666  2133      `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.prime:
.nf
.EQ
gfont I
tdefine sup' X sup "\s+3\v'.35m'\(fm\v'-.35m'\s-3" X
tdefine sup'' X sup "\s+3\v'.35m'\(fm\(fm\v'-.35m'\s-3" X
ndefine sup' X sup ' X
ndefine sup'' X sup '' X
.EN
.EQ
"fm:" ~~~
x sub i sup ' ~~~
x sub X sup '' ~~~
x sup ' ~~~
X sup '' ~~~
X sub x sup ' ~~~
.EN
.EQ
"prime:" ~~~
x sup prime ~~ x sub i sup prime ~~
X sup prime ~~ X sub i sup prime ~~
alpha sup prime ~~ alpha sub i sup prime ~~
beta sup prime ~~ beta sub i sup prime ~~
f sup prime ~~ f sub i sup prime ~~
x sub {i sup prime} ~~ x sub {i sup prime} sup 2 ~~
x sub {i sup prime} ~~ x sub {i sup prime} sup j ~~
.EN
.EQ
"prime:" ~~~
x sup prime ~~ x sub 1 sup prime ~~
X sup prime ~~ X sub 1 sup prime ~~
alpha sup prime ~~ alpha sub 1 sup prime ~~
beta sup prime ~~ beta sub 1 sup prime ~~
f sup prime ~~ f sub 1 sup prime ~~
x sub {1 sup prime} ~~ x sub {1 sup prime} sup 2 ~~
x sub {1 sup prime} ~~ x sub {1 sup prime} sup j ~~
.EN
.sp
spacing:
.sp
.EQ
R sub L sup down 0 ' ~~~
R sub L sup down 10 ' ~~~
R sub L sup down 20 ' ~~~
R sub L sup down 30 ' ~~~
R sub L sup down 40 ' ~~~
R sub L sup down 50 ' ~~~
.EN
.EQ
R sub L sup down 0 size +3 ' ~~~
R sub L sup down 10 size +3 ' ~~~
R sub L sup down 20 size +3 ' ~~~
R sub L sup down 30 size +3 ' ~~~
R sub L sup down 40 size +3 ' ~~~
R sub L sup down 50 size +3 ' ~~~
.EN
.sp
.EQ
f(x)~=~size -1 3 over size -1 4 xxx ~~~
f(x)~=~size -2 3 over size -2 4 xxx ~~~
f(x)~=~size -3 3 over size -3 4 xxx ~~~
f(x)~=~size -4 3 over size -4 4 xxx ~~~
size -2 {3 over 4} =x~~~
size -3 {3 over 4} =x~~~
size -1 {3 over 4} =x~~~
.EN
.EQ
f(x)~=~size -1 3 over size -1 45 xxx ~~~
f(x)~=~size -2 3 over size -2 45 xxx ~~~
f(x)~=~size -3 3 over size -3 45 xxx ~~~
f(x)~=~size -4 3 over size -4 45 xxx ~~~
.EN
.EQ
gsize 9
tdefine s50 % sup size +7 down 50 ' %
tdefine s60 % sup size +7 down 60 ' %
tdefine s70 % sup size +7 down 70 ' %
tdefine s80 % sup size +7 down 80 ' %
.EN
.EQ
===
~~~ R sub i s50
~~~ R sub i s60
~~~ R sub i s70
~~~ R sub i s80
===
.EN
.EQ
gsize 10
===
~~~ R sub i s50
~~~ R sub i s60
~~~ R sub i s70
~~~ R sub i s80
===
.EN
.EQ
gsize 10
.EN

et.sqrt         627314300   9     1     100666  1837      `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.sqrt:
.vs 20p
.EQ I
x = sqrt{a sup 2 + b sup 2}+ sqrt a over b +
sqrt a sup 2 over b sup 2
.EN
.EQ I
sqrt a+b over sqrt c+d
~~~
1 over sqrt{ax sup 2 +bx+c}
.EN
.EQ I
sqrt{A over B} +
sqrt{a over b} ~~ sqrt { b over a } ~~~ sqrt {A sup 2 over B} ~~~ sqrt {A over B sup 2 }
.EN
.EQ I
sqrt x
~~~ sqrt X+1
~~~ sqrt 2
~~~ sqrt x+1
~~~ sqrt { x+y sup half}
~~~ sqrt { X+Y sup half}
~~~ sqrt { 2 sup 2 sup x }

.EN
.EQ I
X = sqrt{A sup 2 + B sup 2}+ sqrt A over B +
sqrt A sup 2 over B sup 2
.EN
.EQ I
sqrt A+B over sqrt C+D
~~~ 1 over sqrt{AX sup 2 +BX+C}
~~~ sqrt A+B bar over sqrt C+D
~~~ 1 over sqrt{AX bar sup 2 +BX+C}
~~~ sqrt {phi sub m sup 1} bar
.EN
.EQ I
sqrt { left [ a over b right ] }
~~~
sqrt { left { a over b right } }
~~~
sqrt { left [ a over b right ] sup 2 }
~~~
sqrt { left { a over b right } sup 2 }
sqrt { left [ a over b over c over d right ] }
~~~
sqrt { left { a over b over c over d right } }
~~~
sqrt { left [ a over b over c over d right ] sup 2 }
~~~
sqrt { left { a over b over c over d right } sup 2 }
.EN
.EQ I
sqrt x ~~ sqrt sqrt x ~~ sqrt sqrt sqrt x ~~ sqrt H sup 2 ~~ sqrt sqrt H sup 2 ~~ sqrt sqrt sqrt H sup 2 ~~
.EN
.sp
From dmg Mon Apr 17 17:33:25 EDT 1989
.sp
The following equations look fine when set at ps 10, but not at ps 12...
.EQ
X sub {cdot ,p-1} ~=~ delta Q sub {cdot ,p-1} ~+~ sqrt {{1 ~-~ delta sup 2}
over {p ~-~ 2}} sum from i=1 to p-2 Q sub {cdot ,i} ,
.EN
.EQ
b sub i ~=~ zeta ~=~ sqrt {{1 ^-^ epsilon sup 2}
over {p~-~1~+~ 2 sqrt {(p^-^1)(1^-^ delta sup 2 )}}} ~=~ O(1),
.EN
.ps 12
.EQ
X sub {cdot ,p-1} ~=~ delta Q sub {cdot ,p-1} ~+~ sqrt {{1 ~-~ delta sup 2}
over {p ~-~ 2}} sum from i=1 to p-2 Q sub {cdot ,i} ,
.EN
.EQ
b sub i ~=~ zeta ~=~ sqrt {{1 ^-^ epsilon sup 2}
over {p~-~1~+~ 2 sqrt {(p^-^1)(1^-^ delta sup 2 )}}} ~=~ O(1),
.EN

et.under        627314300   9     1     100666  386       `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.under:
.nf
.EQ
gfont I
x under ~~~ x sub i under ~~~ {x sub i} under ~~~ {x sub i sup i} under
~~~ y under ~~~ y sub i under ~~~ {y sub i} under ~~~ {y sub i sup i} under
.EN
.EQ
x utilde ~~~ x sub i utilde ~~~ {x sub i} utilde ~~~ {x sub i sup i} utilde
~~~ y utilde ~~~ y sub i utilde ~~~ {y sub i} utilde ~~~ {y sub i sup i} utilde
.EN
et.greek        627314300   9     1     100666  379       `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.greek:
.nf
.EQ
gfont I
alpha ~~~ beta ~~~ gamma ~~~
GAMMA ~~~ delta ~~~ DELTA ~~~
epsilon ~~~ zeta ~~~ eta ~~~
THETA ~~~ theta ~~~ lambda ~~~
LAMBDA ~~~ mu ~~~ nu ~~~
.EN
.EQ
xi ~~~ pi ~~~ PI ~~~
rho ~~~ sigma ~~~ SIGMA ~~~
tau ~~~ phi ~~~ PHI ~~~
psi ~~~ PSI ~~~ omega ~~~
OMEGA ~~~ del ~~~ "\(no" ~~~
partial ~~~ integral ~~~
.EN

et.bar          627314300   9     1     100644  452       `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.bar:
.sp 1i
.nf
.EQ
gfont I
{{{{{ A bar B bar } bar } bar } bar ~
{ A bar B bar }} bar ~
{{A bar B bar} bar ~
{{ A bar B bar} bar } bar } bar } bar
.EN
.sp 2
.EQ
sqrt { { phi  sup 1 } bar }
~~~
sqrt { { phi sub m sup 1 } bar }
.EN
.sp 2
.EQ
{v sub i v sub i+1 } bar  ~~ {v sub i} bar  ~~~
{v sub i v sub i+1 } highbar  ~~ {v sub i} highbar  ~~~~
{v sub i v sub i+1 } lowbar  ~~ {v sub i} lowbar   ~~~
.EN
et.gfont        627314300   9     1     100666  276       `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.gfont:
.EQ
gfont I
gfont B
x sub 123 ~~~
123 roman 456 789 ~~~
(abc) ~~~
()[] ~~~
.EN
.EQ
gfont R
x sub 123 ~~~
123 italic 456 789 ~~~
(abc) ~~~
()[] ~~~
.EN
.EQ
gfont roman
hello world 123
.EN
.EQ
gfont bold
now is the time
.EN
et.dg           627314300   9     1     100664  12189     `
.po .5i
.nf
.sp .25i
.sy date >/tmp/foo
.so /tmp/foo
et.dg
.ll 7.75i
.nf
.vs 16p
.sp
.EQ
define Subbase ' .25 '
define Supshift ' .5 '
gfont I
d sup n x/d sup k y {d sup n x} over {d sup k y} |A sub 0 | sup 2 | sub 2 C sub x p 2 sup 2 sup 2 n sup n sup n e sup x sup 2
.EN
.EQ
x0x1x2x(x)[x]x[(x+1)]x(x-0)2-xx=11=xx
x+x-x/x/x>x<x>=x<=x->x<-x,x;x:x >> x << x|x||x||x|
.EN
.EQ
x sub i,j x sub 1 x sub j x sub 0 x sup 0 x sup i x sup j x sup 2 x sub 1 sup 2
x sub 1,2 x sub i sub j sub 0 x sub i sup j x sup 2 x sub 1 sup 2
x cdot
x times
x alpha
x beta
x delta
x theta
x lambda x chi
x DELTA x inf x int x sum x pi x partial x
x ,..., x ... x x' x sup ' x sub i sup ' int int sum sum
.EN
.sp
.EQ
n0n1n2n(n)[n]n[(n+1)]n(n-0)2-nn=11=nn
n+n-n/n/n>n<n>=n<=n->n<-n,n;n:n >> n << n|n||n||n|
.EN
.EQ
n sub i,j n sub 1 n sub j n sub 0 n sup 0 n sup i n sup j n sup 2 n sub 1 sup 2
n sub 1,2 n sub i sub j sub 0 n sub i sup j n sup 2 n sub 1 sup 2
n cdot
n times
n alpha
n beta
n delta
n theta
n lambda n chi
n DELTA n inf n int n sum n pi n partial n
n ,..., n ... n
.EN
.sp
.EQ
3[+2](-1)[]()[/]/(/)B[h]/(n%1)]+)-/+(+[-+-\(muffifjfkf\(*ljajbj\(pdjf|-x|/||F||=| int |)[|]
.EN
.sp
.EQ
z0z1z2z(z)[z]z[(z+1)]z(z-0)2-zz(1+z)
z=11=zz+z-z/z/z>z<z>=z<=z->z<-z,z
z;z:z >> z << z|z||z|z|
.EN
.EQ
z sub i,j z sub 1 z sub j z sub 0 z sup 0 z sup i z sup j z sup 2 z sub 1 sup 2
z sub 1,2 z sub i sub j sub 0 z sub i sup j z sup 2 z sub 1 sup 2
z cdot
z times
z alpha
z beta
z delta
z theta
z lambda z chi
z DELTA z inf z int z sum z pi z partial z
z ,..., z ... z
.EN
.sp
.EQ
y0y1y2y(y)[y]y[(y+1)]y(y-0)2-yy=11=yy
y+y-y/y/y>y<y>=y<=y->y<-y,y;y:y >> y << y|y||y|y|
.EN
.EQ
y sub i,y y sub 1 y sub y y sub 0 y sup 0 y sup i y sup y y sup 2 y sub 1 sup 2
y sub 1,2 y sub i sub j sub 0 y sub i sup j y sup 2 y sub 1 sup 2
y cdot
y times
y alpha
y beta
y delta
y theta
y lambda y chi
y DELTA y inf y int y sum y pi y partial y
y ,..., y ... y
.EN
.sp
.EQ
i0
i1
i2
i(i)[i]i[(i+1)]i(i-0)2-i
i=1
1=i
i+i-i/i/i>i<i>=i<=i->i<-i,i;i:i >> i << i
|i||i|i|
.EN
.EQ
i sub i,j i sub 1 i sub j i sub 0 i sup 0 i sup i i sup j i sup 2 i sub 1 sup 2
i sub 1,2 i sub i sub j sub 0 i sub i sup j i sup 2 i sub 1 sup 2
i cdot
i times
i alpha
i beta
i delta
i theta
i lambda i chi
i DELTA i inf i int i sum i pi i partial i
i ,..., i ... i
.EN
.sp
.EQ
j0
j1
j2
j(j)[j]j[(j+1)]j(j-0)2-j
j=1
1=j
j+j-j/j/j>j<j>=j<=j->j<-j,j;j:j >> j << j
|j||j|j|
.EN
.EQ
j sub i,j j sub 1 j sub j j sub 0 j sup 0 j sup i j sup j j sup 2 j sub 1 sup 2
j sub 1,2 j sub j sub j sub 0 j sub j sup j j sup 2 j sub 1 sup 2
j cdot
j times
j alpha
j beta
j delta
j theta
j lambda j chi
j DELTA j inf j int j sum j pi j partial j
j ,..., j ... j
.EN
.sp
.EQ
f0
f1
f2
f(f)[f]f[(f+1)]f(f-0)2-f
f=1
1=f
f+f-f/f/f>f<f>=f<=f->f<-f,f;f:f >> f << f
|f||f||f|f' f sub 1 sup prime
.EN
.EQ
f sub i,j f sub 1 f sub j f sub 0 f sup 0 f sup i f sup j f sup 2 f sub 1 sup 2
f sub i,j f sup 2 f sub j sub 0 f sub i sup j f sup 2 f sub 1 sup 2
f cdot
f times
f alpha
f beta
f delta
f theta
f lambda f chi
f DELTA f inf f int f sum f pi f partial f
f ,..., f ... f
.EN
.sp
.EQ
g0
g1
g2
g(g)[g]g[(g+1)]g(g-0)2-g
g=1
1=g
g+g-g/g/g>g<g>=g<=g->g<-g,g;g:g >> g << g
|g||g||g|g' g sub 1 sup prime
.EN
.EQ
g sub i,j g sub 1 g sub j g sub 0 g sup 0 g sup i g sup j g sup 2 g sub 1 sup 2
g sub i,j g sup 2 g sub j sub 0 g sub i sup j g sup 2 g sub 1 sup 2
g cdot
g times
g alpha
g beta
g delta
g theta
g lambda g chi
g DELTA g inf g int g sum g pi g partial g
g ,..., g ... g
.EN
.sp
.EQ
10
11
12
1(1)[1]1[(1+1)]1(1-0)2-1
1=1
1=1
1+1-1/1/1>1<1>=1<=1->1<-1,1;1:1 >> 1 << 1
|1||1|1|
.EN
.EQ
1 sub i,j 1 sub 1 1 sub j 1 sub 0 1 sup 0 1 sup i 1 sup j 1 sup 2 1 sub 1 sup 2
1 sub i,j 1 sup 2 1 sub j sub 0 1 sub i sup j 1 sup 2 1 sub 1 sup 2
1 cdot
1 times
1 alpha
1 beta
1 delta
1 theta
1 lambda 1 chi
1 DELTA 1 inf 1 int 1 sum 1 pi 1 partial 1
1 ,..., 1 ... 1
.EN
.sp
.EQ
00
01
02
0(0)[0]0[(0+1)]0(0-0)2-0
0=1
1=0
0+0-0/0/0>0<0>=0<=0->0<-0,0;0:0 >> 0 << 0
|0||0|0|
.EN
.EQ
0 sub i,j 0 sub 1 0 sub j 0 sub 0 0 sup 0 0 sup i 0 sup j 0 sup 2 0 sub 1 sup 2
0 sub i,j 0 sup 2 0 sub j sub 0 0 sub i sup j 0 sup 2 0 sub 1 sup 2
0 cdot
0 times
0 alpha
0 beta
0 delta
0 theta
0 lambda 0 chi
0 DELTA 0 inf 0 int 0 sum 0 pi 0 partial 0
0 ,..., 0 ... 0
.EN
.sp
.EQ
22
21
22
2(2)[2]2[(2+1)]2(2-2)2-2
2=1
1=2
2+2-2/2/2>2<2>=2<=2->2<-2,2;2:2 >> 2 << 2
|2||2|2|
.EN
.EQ
2 sub i,j 2 sub 1 2 sub j 2 sub 2 2 sup 2 2 sup i 2 sup j 2 sup 2 2 sub 1 sup 2
2 sub i,j 2 sup 2 2 sub j sub 2 2 sub i sup j 2 sup 2 2 sub 1 sup 2
2 cdot
2 times
2 alpha
2 beta
2 delta
2 theta
2 lambda 2 chi
2 DELTA 2 inf 2 int 2 sum 2 pi 2 partial 2
2 ,..., 2 ... 2
.EN
.sp
.EQ
X0
X1
X2
X(X)[X]X[(X+1)]X(X-0)2-X
X=1
1=X
X+X-X/X/X>X<X>=X<=X->X<-X,X;X:X >> X << X
|X||X||X|
.EN
.EQ
X sub i,j X sub 1 X sub j X sub 0 X sup 0 X sup i X sup j X sup 2 X sub 1 sup 2
X sub i,j X sup 2 X sub j sub 0 X sub i sup j X sup 2 X sub 1 sup 2
X cdot
X times
X alpha
X beta
X delta
X theta
X lambda X chi
X DELTA X inf X int X sum X pi X partial X
X ,..., X ... X
.EN
.sp
.EQ
H0
H1
H2
H(H)[H]H[(H+1)]H(H-0)2-H
H=1
1=H
H+H-H/H/H>H<H>=H<=H->H<-H,H;H:H >> H << H
|H||H||H|
.EN
.EQ
H sub i,j H sub 1 H sub j H sub 0 H sup 0 H sup i H sup j H sup 2 H sub 1 sup 2
H sub i,j H sup 2 H sub j sub 0 H sub i sup j H sup 2 H sub 1 sup 2
H cdot
H times
H alpha
H beta
H delta
H theta
H lambda H chi
H DELTA H inf H int H sum H pi H partial H
H ,..., H ... H
.EN
.sp
.EQ
Y0
Y1
Y2
Y(Y)[Y]Y[(Y+1)]Y(Y-0)2-Y
Y=1
1=Y
Y+Y-Y/Y/Y>Y<Y>=Y<=Y->Y<-Y,Y;Y:Y >> Y << Y
|Y||Y||Y|
.EN
.EQ
Y sub i,j Y sub 1 Y sub j Y sub 0 Y sup 0 Y sup i Y sup j Y sup 2 Y sub 1 sup 2
Y sub i,j Y sup 2 Y sub j sub 0 Y sub i sup j Y sup 2 Y sub 1 sup 2
Y cdot
Y times
Y alpha
Y beta
Y delta
Y theta
Y lambda Y chi
Y DELTA Y inf Y int Y sum Y pi Y partial Y
Y ,..., Y ... Y
.EN
.sp
.EQ
partial 0
partial 1
partial 2
partial ( partial )[ partial ] partial [( partial +1)] partial ( partial -0)2- partial 
partial =1
1= partial 
partial + partial - partial / partial / partial > partial < partial >= partial <= partial -> partial <- partial , partial ; partial : partial  >>  partial  <<  partial 
| partial || partial | partial |
.EN
.EQ
partial sub i,j partial sub 1 partial sub j partial sub 0 partial sup 0 partial sup i partial sup j partial sup 2 partial sub 1 sup 2
partial sub i,j partial sup 2 partial sub j sub 0 partial sub i sup j partial sup 2 partial sub 1 sup 2
partial cdot
partial times
partial alpha
partial beta
partial delta
partial theta
partial lambda partial chi
partial DELTA partial inf partial int partial sum partial pi partial partial partial 
partial ,..., partial ... partial 
.EN
.sp
.EQ
pi 0
pi 1
pi 2
pi ( pi )[ pi ] pi [( pi +1)] pi ( pi -0)2- pi 
pi =1
1= pi 
pi + pi - pi / pi / pi > pi < pi >= pi <= pi -> pi <- pi , pi ; pi : pi  >>  pi  <<  pi 
| pi || pi || pi |
.EN
.EQ
pi sub i,j pi sub 1 pi sub j pi sub 0 pi sup 0 pi sup i pi sup j pi sup 2 pi sub 1 sup 2
pi sub i,j pi sup 2 pi sub j sub 0 pi sub i sup j pi sup 2 pi sub 1 sup 2
pi cdot
pi times
pi alpha
pi beta
pi delta
pi theta
pi lambda pi chi
pi DELTA pi inf pi int pi sum pi pi pi partial pi 
pi ,..., pi ... pi 
.EN
.sp
.EQ
alpha 0
alpha 1
alpha 2
alpha ( alpha )[ alpha ] alpha [( alpha +1)] alpha ( alpha -0)2- alpha 
alpha =1
1= alpha 
alpha + alpha - alpha / alpha / alpha > alpha < alpha >= alpha <= alpha -> alpha <- alpha , alpha ; alpha : alpha  >>  alpha  <<  alpha 
| alpha || alpha || alpha |
.EN
.EQ
alpha sub i,j alpha sub 1 alpha sub j alpha sub 0 alpha sup 0 alpha sup i alpha sup j alpha sup 2 alpha sub 1 sup 2
alpha sub i,j alpha sup 2 alpha sub j sub 0 alpha sub i sup j alpha sup 2 alpha sub 1 sup 2
alpha cdot
alpha times
alpha alpha
alpha beta
alpha delta
alpha theta
alpha alpha alpha chi
alpha DELTA alpha inf alpha int alpha sum alpha pi alpha partial alpha 
alpha ,..., alpha ... alpha 
.EN
.sp
.EQ
lambda 0
lambda 1
lambda 2
lambda ( lambda )[ lambda ] lambda [( lambda +1)] lambda ( lambda -0)2- lambda 
lambda =1
1= lambda 
lambda + lambda - lambda / lambda / lambda > lambda < lambda >= lambda <= lambda -> lambda <- lambda , lambda ; lambda : lambda  >>  lambda  <<  lambda 
| lambda || lambda || lambda |
.EN
.EQ
lambda sub i,j lambda sub 1 lambda sub j lambda sub 0 lambda sup 0 lambda sup i lambda sup j lambda sup 2 lambda sub 1 sup 2
lambda sub i,j lambda sup 2 lambda sub j sub 0 lambda sub i sup j lambda sup 2 lambda sub 1 sup 2
lambda cdot
lambda times
lambda alpha
lambda beta
lambda delta
lambda theta
lambda lambda lambda chi
lambda DELTA lambda inf lambda int lambda sum lambda pi lambda partial lambda 
lambda ,..., lambda ... lambda 
.EN
.EQ
z sub i sup j
i sub i sup j
j sub i sup j
f sub i sup j
x sub i sup j
1 sub i sup j
0 sub i sup j
X sub i sup j
H sub i sup j
Y sub i sup j
partial sub i sup j
pi sub i sup j
lambda sub i sup j
.EN
.EQ
z sub m sup k
i sub m sup k
j sub m sup k
f sub m sup k
x sub m sup k
1 sub m sup k
0 sub m sup k
X sub m sup k
H sub m sup k
Y sub m sup k
partial sub m sup k
pi sub m sup k
lambda sub m sup k
.EN
.EQ
z sub pi sup 2
i sub pi sup 2
j sub pi sup 2
f sub pi sup 2
x sub pi sup 2
1 sub pi sup 2
0 sub pi sup 2
X sub pi sup 2
H sub pi sup 2
Y sub pi sup 2
partial sub pi sup 2
pi sub pi sup 2
lambda sub pi sup 2
.EN
.EQ
gfont R
.EN
.EQ
z sub i sup j
i sub i sup j
j sub i sup j
f sub i sup j
x sub i sup j
1 sub i sup j
0 sub i sup j
X sub i sup j
H sub i sup j
Y sub i sup j
partial sub i sup j
pi sub i sup j
lambda sub i sup j
.EN
.EQ
z sub m sup k
i sub m sup k
j sub m sup k
f sub m sup k
x sub m sup k
1 sub m sup k
0 sub m sup k
X sub m sup k
H sub m sup k
Y sub m sup k
partial sub m sup k
pi sub m sup k
lambda sub m sup k
.EN
.EQ
z sub pi sup 2
i sub pi sup 2
j sub pi sup 2
f sub pi sup 2
x sub pi sup 2
1 sub pi sup 2
0 sub pi sup 2
X sub pi sup 2
H sub pi sup 2
Y sub pi sup 2
partial sub pi sup 2
pi sub pi sup 2
lambda sub pi sup 2
.EN
.EQ
gfont B
.EN
.EQ
z sub i sup j
i sub i sup j
j sub i sup j
f sub i sup j
x sub i sup j
1 sub i sup j
0 sub i sup j
X sub i sup j
H sub i sup j
Y sub i sup j
partial sub i sup j
pi sub i sup j
lambda sub i sup j
.EN
.EQ
z sub m sup k
i sub m sup k
j sub m sup k
f sub m sup k
x sub m sup k
1 sub m sup k
0 sub m sup k
X sub m sup k
H sub m sup k
Y sub m sup k
partial sub m sup k
pi sub m sup k
lambda sub m sup k
.EN
.EQ
z sub pi sup 2
i sub pi sup 2
j sub pi sup 2
f sub pi sup 2
x sub pi sup 2
1 sub pi sup 2
0 sub pi sup 2
X sub pi sup 2
H sub pi sup 2
Y sub pi sup 2
partial sub pi sup 2
pi sub pi sup 2
lambda sub pi sup 2
.EN
.sp
.EQ
gfont I
x sub i )x
x sub j )x
x sub K )x
x sub H )x
x sub 1 )x
x sub 2 )x
~~~
x sup i )x
x sup j )x
x sup K )x
x sup H )x
x sup 1 )x
x sup 2 )x
~~~
(x)x
(1)x
(y)x
(K)x
(H)x
(2)x
~~~
(x )x
(1 )x
(y )x
(K )x
(H )x
(2 )x
.EN
.EQ
x sup i sup j )x
x sup i sup 1 )x
x sup i sup 2 )x
x sup i sup K )x
x sup i sup H )x
x sup i sup n )x
x sup i sup m )x
~~~
x sup 2 sup j )x
x sup 2 sup 1 )x
x sup 2 sup 2 )x
x sup 2 sup K )x
x sup 2 sup H )x
x sup 2 sup n )x
x sup 2 sup m )x
~~~
x sub i sub j )x
x sub i sub 1 )x
x sub i sub 2 )x
x sub i sub K )x
x sub i sub H )x
x sub i sub n )x
x sub i sub m )x
.EN
.EQ
x sub 2 sub j )x
x sub 2 sub 1 )x
x sub 2 sub 2 )x
x sub 2 sub K )x
x sub 2 sub H )x
x sub 2 sub n )x
x sub 2 sub m )x
.EN
.EQ
gfont R
(x)xxxx
(y)xxxx
(1)xxxx
(2)xxxx
(X)xxxx
(Y)xxxx
(x+y)xxxx
(X-Y)xxxx
.EN

.EQ
x sub i sub 2 sup j
x sub i sub 2 sup j
x sub i sub 2 sup j
x sub i sub 2 sup j
x sub i sub 2 sup j
x sub i sub 2 sup j
x sub i sub 2 sup j
x sub i sub 2 sup j
x sub i sub 2 sup j
x sub i sub 2 sup j
x sub i sub 2 sup j
x sub i sub 2 sup j
x sub i sub 2 sup j
x sub i sub 2 sup j
x sub i sub 2 sup j
x sub i sub 2 sup j
x sub i sub 2 sup j
x sub i sub 2 sup j
x sub i sub 2 sup j
x sub i sub 2 sup j
.EN
.vs 16p
.nf
.EQ
1.2 ~~ 3.4 ~~~ x.1 ~~~ 1.x ~~~ a.b ~~~ x.y ~~~ X.Z
.EN
.EQ
gfont R
1.2 ~~ 3.4 ~~~ x.1 ~~~ 1.x ~~~ a.b ~~~ x.y ~~~ X.Z
.EN
.EQ
gfont B
1.2 ~~ 3.4 ~~~ x.1 ~~~ 1.x ~~~ a.b ~~~ x.y ~~~ X.Z
.EN
1.2 ~~ 3.4 ~~~ x.1 ~~~ 1.x ~~~ a.b ~~~ x.y ~~~ X.Z

.EQ
1,2 ~~ 3,4 ~~~ x,1 ~~~ 1,x ~~~ a,b ~~~ x,y ~~~ X,Z
.EN
.EQ
gfont R
1,2 ~~ 3,4 ~~~ x,1 ~~~ 1,x ~~~ a,b ~~~ x,y ~~~ X,Z
.EN
.EQ
gfont B
1,2 ~~ 3,4 ~~~ x,1 ~~~ 1,x ~~~ a,b ~~~ x,y ~~~ X,Z
.EN
1,2 ~~ 3,4 ~~~ x,1 ~~~ 1,x ~~~ a,b ~~~ x,y ~~~ X,Z

et.gay          627314300   9     1     100666  659       `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.gay:
.nf
.EQ
x = left { lpile { a above pile { b above c above d} }
right }
.EN
.EQ
x = left [ lpile { a above pile { b above c above d} }
right ]
.EN
.sp 1i
.EQ
delim $$
define NMO `~"\(mo\s+3\h'-\w'/'u'/\s-3"~`
.EN
.LP
.EQ (3.6a)
lambda sub i ~:=~ left { ~ lpile {
left ( C sub 0 sup -T grad f ( x sup c ) right ) sub j
~if~ C sub i ~roman {is~row}~ j ~roman of~ C sub 0
above ^0 ~if~ i NMO A sub 0 ( x sup c ) .}
right }
.EN
.EQ (7.2)
s tilde sup k ~:=~ left { ~ lpile {bold 0 ~if~ Z~ roman {is~null~or}
~Z sup T g~=~ bold 0
above -{Z Z sup T g} over {|| Z Z sup T g || sub 2}~^ roman otherwise }
right }
.EN

et.eqn          627314300   9     1     100664  1986      `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.eqn:
.EQ
gfont I
delim $$
.EN
.EQ
{A sub B} {A sub B} {A sub B} {A sub B} {A sub B}
.EN
.sp
.EQ
P(XXXX~ k|X) ~=~ max from {1<i<m} ~P(XXXX ~i|X)
.EN
.sp
.EQ
D sub 2 ~=~ left [ S sup -1 ~-~ {d sup T ~(S sup -1 ) sup 2 ~d~(S sup -1 )
sup 2} over
{d sup T~(S sup -1 ) sup 3 ~d } right ] ~cdot~ d
.EN
.sp
.EQ
M sub g ~=~ left ( pile {{X bar sub 1 sup {(g)}} above . above . above
. above {X bar sub n sup {(g)} }} right ) ~~,g ~=~ 1,2
.EN
.sp
.EQ
W ~=~ left [ pile { {W sub 11} above {W sub 21}}
pile { {W sub 12} above {W sub 22}} right ]
~~and~~
T ~=~ left [ pile { {T sub 11} above {T sub 21}}
pile { {T sub 12} above {T sub 22}} right ]
.EN
.sp
.EQ
X bar sub i sup {(g)} ~=~ 1 over N sub g ~sum from r=1 to N sub g
X sub ir sup {(g)}
~~, lpile {{i~=~1,2...n} over {g~=~1,2}}
.EN
.sp
.EQ
S sub ij ~=~ 1 over {N sub 1 + N sub 2 - 2}
left [ mark ~sum from r=1 to N sub 1
(X sub ir sup {(1)} ~-~ X bar sub i sup {(1)} )
(X sub jr sup {(1)} ~-~ X bar sub j sup {(1)} ) ~+~
.EN
.sp
.EQ
sum from r=1 to N sub 2
(X sub ir sup {(2)} ~-~ X bar sub i sup {(2)} )
(X sub jr sup {(2)} ~-~ X bar sub j sup {(2)} ) 
.EN
.sp
.EQ
IF~ (M sub 2 - M sub 1 ) sup T S sup -1 X ~-~
0.5(M sub 2 - M sub 1 ) sup T S sup -1 (M sub 2 + M sub 1 )
~-~ ln ( P sub 2 over P sup 1 ) ~<~ 0
.EN
.sp
.EQ
IF~0.5X sup T (S sub 1 sup -1 ~-~ S sub 2 sup -1 )X ~-~
(M sub 1 sup T S sub 1 sup -1 ~-~ M sub 2 sup T S sub 2 sup -1 )X ~+~
.EN
.sp
.EQ
0.5(M sub 1 sup T S sub 1 sup -1 M sub 1 ~-~
M sub 2 sup T S sub 2 sup -1 M sub 2 ) ~+~
0.5ln ( {P sub 2} over {P sub 1} ) ~+~
0.5ln ( {D sub 2} over {D sub 1} ) ~<~ 0
.EN
.sp
.EQ
F sub i (X) ~=~ ln (P sub i ) ~-~ 1 over 2 ln (D sub i ) ~+~
1 over 2 M sub i sup T S sub i sup -1 M sub i ~-~
1 over 2 X sup T S sub i sup -1 X sup 2 ~+~
X sup T S sub i sup -1 M sub i
.EN
.sp
.EQ
w sub ij ~=~ 1 over n ~sum from m=1 to {n sub s} sum from k=1
to {n sub {m sub 0}} ( X sub mki - X bar sub m sub i )
( X sub mki - X bar sub m sub j )
.EN
et.gap          627314300   9     1     100666  1547      `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.gap:
.sp 1i
.nf
.EQ
gfont I
= col {a above b above c}
= col 25 {a above b above c}
= col 50 {a above b above c}
= col 100 {a above b above c}
= col 200 {a above b above c}
=
.EN
.EQ
= lcol {a above bbb above ccccc}
= lcol 25 {a above bbb above ccccc}
= lcol 50 {a above bbb above ccccc}
= lcol 100 {a above bbb above ccccc}
= lcol 200 {a above bbb above ccccc}
=
.EN
.EQ
= col {a above b above c}
= col -25 {a above b above c}
= col -50 {a above b above c}
= col -100 {a above b above c}
= col -200 {a above b above c}
=
.EN
.EQ
= lcol {a above bbb above ccccc}
= lcol -25 {a above bbb above ccccc}
= lcol -50 {a above bbb above ccccc}
= lcol -100 {a above bbb above ccccc}
= lcol -200 {a above bbb above ccccc}
=
.EN
.sp .5i
.EQ
left [ matrix {
col {a above b above c}
col 25 {a above b above c}
col 50 {a above b above c}
col 100 {a above b above c}
col 200 {a above b above c}
} right ]
.EN
.sp .5i
.EQ
left [ matrix {
lcol {a above bbb above ccccc}
lcol 25 {a above bbb above ccccc}
lcol 50 {a above bbb above ccccc}
lcol 100 {a above bbb above ccccc}
lcol 200 {a above bbb above ccccc}
} right ]
.EN
.sp .5i
.EQ
left [ matrix {
col {a above b above c}
col -25 {a above b above c}
col -50 {a above b above c}
col -100 {a above b above c}
col -200 {a above b above c}
} right ]
.EN
.sp .5i
.EQ
left [ matrix {
lcol {a above bbb above ccccc}
lcol -25 {a above bbb above ccccc}
lcol -50 {a above bbb above ccccc}
lcol -100 {a above bbb above ccccc}
lcol -200 {a above bbb above ccccc}
} right ]
.EN

et.cvw          627314300   9     1     100666  19461     `
.so /usr/lib/tmac/tmac.s
.LP
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.cvw:
.EQ
tdefine ciplus % "\o'\(pl\(ci'" %
ndefine ciplus % O+ %
tdefine citimes % "\o'\(mu\(ci'" %
ndefine citimes % Ox %
tdefine =wig % "\(eq\h'-\w'\(eq'u-\w'\s-2\(ap'u/2u'\v'-.4m'\s-2\z\(ap\(ap\s+2\v'.4m'\h'\w'\(eq'u-\w'\s-2\(ap'u/2u'" %
ndefine =wig % ="~" %
tdefine bigstar % "\o'\(pl\(mu'" %
ndefine bigstar % X|- %
tdefine =dot % "\z\(eq\v'-.6m'\h'.2m'\s+2.\s-2\v'.6m'\h'.1m'" %
ndefine =dot % = dot %
tdefine orsign % "\s-2\v'-.15m'\z\e\e\h'-.05m'\z\(sl\(sl\v'.15m'\s+2" %
ndefine orsign % \e/ %
tdefine andsign % "\s-2\v'-.15m'\z\(sl\(sl\h'-.05m'\z\e\e\v'.15m'\s+2" %
ndefine andsign % /\e %
tdefine =del % "\v'.3m'\z=\v'-.6m'\h'.3m'\s-1\(*D\s+1\v'.3m'" %
ndefine =del % = to DELTA %
tdefine oppA % "\s-2\v'-.15m'\z\e\e\h'-.05m'\z\(sl\(sl\v'-.15m'\h'-.75m'\z-\z-\h'.2m'\z-\z-\v'.3m'\h'.4m'\s+2" %
ndefine oppA % V- %
tdefine oppE %"\s-3\v'.2m'\z\(em\v'-.5m'\z\(em\v'-.5m'\z\(em\v'.55m'\h'.9m'\z\(br\z\(br\v'.25m'\s+3" %
ndefine oppE % E/ %
tdefine incl % "\s-1\z\(or\h'-.1m'\v'-.45m'\z\(em\v'.7m'\z\(em\v'.2m'\(em\v'-.45m'\s+1" %
ndefine incl % C_ %
tdefine nomem % "\o'\(mo\(sl'" %
ndefine nomem % C-/ %
tdefine angstrom % "\fR\zA\v'-.3m'\h'.2m'\(de\v'.3m'\fP\h'.2m'" %
ndefine angstrom % A to o %
tdefine star %{ roman "\v'.5m'\s+3*\s-3\v'-.5m'"}%
ndefine star % * %
tdefine || % \(or\(or %
tdefine <wig % "\z<\v'.4m'\(ap\v'-.4m'" %
ndefine <wig %{ < from "~" }%
tdefine >wig % "\z>\v'.4m'\(ap\v'-.4m'" %
ndefine >wig %{ > from "~" }%
tdefine langle % "\s-3\b'\(sl\e'\s0" %
ndefine langle %<%
tdefine rangle % "\s-3\b'\e\(sl'\s0" %
ndefine rangle %>%
tdefine hbar % "\zh\v'-.6m'\h'.05m'\(ru\v'.6m'" %
ndefine hbar % h\u-\d %
ndefine ppd % _| %
tdefine ppd % "\o'\(ru\s-2\(or\s+2'" %
tdefine <-> % "\o'\(<-\(->'" %
ndefine <-> % "<-->" %
tdefine <=> % "\s-2\z<\v'.05m'\h'.2m'\z=\h'.55m'=\h'-.6m'\v'-.05m'>\s+2" %
ndefine <=> % "<=>" %
tdefine |< % "\o'<\(or'" %
ndefine |< % <| %
tdefine |> % "\o'>\(or'" %
ndefine |> % |> %
tdefine ang % "\v'-.15m'\z\s-2\(sl\s+2\v'.15m'\(ru" %
ndefine ang % /_ %
tdefine rang % "\z\(or\h'.15m'\(ru" %
ndefine rang % L %
tdefine 3dot % "\v'-.8m'\z.\v'.5m'\z.\v'.5m'.\v'-.2m'" %
ndefine 3dot % .\u.\u.\d\d %
tdefine thf % ".\v'-.5m'.\v'.5m'." %
ndefine thf % ..\u.\d %
tdefine quarter % roman \(14 %
ndefine quarter % 1/4 %
tdefine 3quarter % roman \(34 %
ndefine 3quarter % 3/4 %
tdefine degree % \(de %
ndefine degree % nothing sup o %
tdefine square % \(sq %
ndefine square % [] %
tdefine circle % \(ci %
ndefine circle % O %
tdefine blot % "\fB\(sq\fP" %
ndefine blot % HIX %
tdefine bullet % \(bu %
ndefine bullet % oxe %
tdefine -wig % "\(~=" %
ndefine -wig % - to "~" %
tdefine wig % \(ap %
ndefine wig % "~" %
tdefine prop % \(pt %
ndefine prop % oc %
tdefine empty % \(es %
ndefine empty % O/ %
tdefine member % \(mo %
ndefine member % C- %
tdefine cup % \(cu %
ndefine cup % U %
define cap % \(ca %
define subset % \(sb %
define supset % \(sp %
define !subset % \(ib %
define !supset % \(ip %
delim $$
.EN
.ds LF "Draft
.ds RF "Comments Solicited
.nr PS 12
.nr VS 16
.TL
Convex Hulls of Piecewise-Smooth Jordan Curves
.AU
Alejandro A. Sch$a dotdot$ffer*
.AU
Christopher J. Van Wyk
.AI
.MH
.FS
*Department of Computer Science,
Margaret Jacks Hall,
Stanford University,
Stanford, California 94305
.FE
.ft
.EQ
define F /"\fHF\fP"/
define Fim /{ F sub > }/
define Fpre /{ F sup < }/
define Finv /{ F sup <- }/
define ej /{ e sub j }/
define sej /"{" ej "}"/
define fj /{ f sub j }/
define bC /{ partial C }/
define bD /{ partial D }/
define bP /{ partial P }/
define scrC /"\fHC\fP"/
define scrR /bold "I" back 20 bold "R"/
define QED /"\(bx"/
define mod /{roman "mod"}/
define LO /{ L sub O }/
define scrl /"\(Sl"/
define ejk /{ e sub j sub k }/
define sejk /SIGMA/
define evar /E/
define p1 /{ p sub 1 }/
define p2 /{ p sub 2 }/
define op2 /{ op sub 2 }/
define begin /"\f(CWbegin\fP"/
define end /"\f(CWend\fP"/
define if /"\f(CWif\fP"/
define then /"\f(CWthen\fP"/
define else /"\f(CWelse\fP"/
define do /"\f(CWdo\fP"/
define output /"\f(CWoutput\fP"/
define while /"\f(CWwhile\fP"/
define until /"\f(CWuntil\fP"/
define not /"\f(CWnot\fP"/
define pop /"\f(CWpop\fP"/
define top /"\f(CWtop\fP"/
define push /"\f(CWpush\fP"/
define endloop /"\f(CWendloop\fP"/
define next /"\f(CWnext\fP"/
define loop /"\f(CWloop\fP"/
define input /"\f(CWinput\fP"/
define nomem /"\o'|\(mo'"/
define nosubset /"\o'|\(sb'"/
define and /andsign/
define bgk /partial G(k)/
.EN
.LP
Let $scrC$ be the unit circle in $scrR sup 2$.
The closed arc of $scrC$ traversed as one moves
counterclockwise from $alpha member scrC$ to $beta member scrC$ is denoted
$[ alpha , beta ]$.
Call the closed line segment between two points $x, ~ y member scrR sup 2$
$L(x,y)$;
let $ ~ LO (x,y)$ be the open line segment between $x$ and $y$.
Given two points $x, ~ y member scrR sup 2$,
the closed half plane that contains any counterclockwise 
circular arc through $x$ and $y$
is denoted $HP(x,y)$;
the open half plane is denoted $HP sub O (x,y)$.
Fix $n >0$, and
let $theta ~ = ~ exp (i pi / n )$.
Let $F : scrC ~ -> ~ scrR sup 2$
be given by a family of $n$ functions
$fj : [ theta sup j , theta sup j+1 ] ~ -> ~ scrR sup 2$,
$0 <= j < n$.
Since the domain intervals are closed,
$f sub {(j-1) mod n} ( theta sup j ) ~=~ fj ( theta sup j )$
for all $j$.
Call the image*
.FS
*For any mapping $g: X -> Y$,
$A subset X$ and $B subset Y$,
$g sub > ( A )$ denotes the image of the set $A$ under $g$,
$g sup < ( B )$ denotes the preimage of the set $B$ under $g$;
if $g$ is bijective and $y member Y$,
$g sup <- ( y )$ denotes the inverse image of the element $y$ under $g$ [12].
.FE
of the $j sup {roman "th"}$ arc,
$fj sub > ( [ theta sup j ,  theta sup j+1 ] )$,
the $j sup {roman "th"}$ $edge$, denoted $ej$;
$fj ( theta sup j )$ and $fj ( theta sup j+1 )$
are the $endpoints$ of $ej$.
Assume $F$ satisfies the following:
.IP (1)
$F$ is injective; i.e., the image is non-self-intersecting;
.IP (2)
the coordinate functions of each $fj$ are differentiable everywhere
on their domain; and,
.IP (3)
the tangent line at any point $fj ( t )$,
$t member [ theta sup j  , theta sup j+1 ]$,
bounds a closed half plane that contains $ej$.
.LP
Let $P$ be the closed region in $scrR sup 2$ bounded by $Fim ( scrC )$.  
Let $bP$ be the boundary of $P$; that is, $bP$ is
the homeomorphic image of $scrC$ under $F$.
Conditions (1)-(3) above imply that $bP$ is a Jordan curve
composed of $n$ convex differentiable curves.
If the edges $e sub j$ are all line segments, then $bP$ is a simple polygon.
Assume without loss of generality that the endpoints of $bP$ are
generated in counterclockwise order as $scrC$ is traversed counterclockwise.
Given $x, ~ y member bP$, define
$trace (x,y) ~ = ~ Fim ([ Finv (x) , Finv (y) ])$,
the portion of $bP$ encountered in a counterclockwise traversal of $bP$
from $x$ to $y$ (Figure 2);
put $trace sub O (x,y) ~=~ trace (x,y) "\e" "{"x,y"}"$.
.LP
$trace(x,^y)$ includes $F ( theta )$ and $F ( theta sup 4 )$;
$trace(y,^x)$ includes $F ( theta sup 9 )$.
Let $C$ be the convex hull of $P$.
.LP
$C$ in $O(n)$ operations.
.LP
$Lemma$ 2.
Let $x$ and $y$ be distinct points in $bC cap bP$,
with $trace(x,y) subset ej$.
If $trace sub O (x,y) nosubset HP(y,x)$,
then $trace(x,y) subset bC$;
that is, the piece of $ej$ between $x$ and $y$ lies on the boundary of 
the convex hull of $P$.
Otherwise,
$L(x,y) subset bC$; that is, the line segment between $x$ and $y$ lies
on the boundary of the convex hull of $P$.
$Proof$.
Consider the open region $Q$ bounded away from $P$
by lines of support at $x$ and $y$
and the subedge $trace(x,y)$.
No point in $P$ can lie in $Q$;
by definition, every convex combination of $x$ and $y$ lies in $C$,
and every point in $P$ lies in $C$.
Thus,
if $trace sub O (x,y) nosubset HP(y,x)$,
then $trace(x,y) subset bC$
(Figure 4(a));
otherwise, $L(x,y) subset bC$
(Figure 4(b)).  $QED$
.LP
Let $B ~ = ~ Fpre ( bP cap bC )$;
$B$ is the preimage under $F$ of the intersection of edges in $bP$ with $bC$.
A point $rho member B$ is an $interior$ point of $B$ if $B$ contains
an open neighborhood in $scrC$ of $rho$.
Points $rho member B$ that are not interior points of $B$
are called $boundary$ points.
.LP
$Lemma$ 3.
Suppose for some edge $ej$,
$bC cap ej ~ != ~ empty$.
At most two points in $fj sup < ( bC cap ej )$
are boundary points of $B$.
$Proof$.
Suppose three distinct points
$x , ~ y , ~ z member ej$
are the images of boundary points of $B$.
Assume without loss of generality that
$x$, $y$, and $z$ lie in counterclockwise order on $ej$.
By property (3) of $F$ either every chord of $ej$
lies outside $P$ or every chord of $ej$
intersects the interior of $P$.
If the chords $L( x, y)$,
$L( y, z)$ and
$L( x, z)$ lie outside $P$
(Figure 5(a)),
by Lemma 2 they lie on $bC$;
but they form a triangle outside which $P$ is known to lie
and since $bC$ is simple, this is a contradiction.
If the chord $L( x, z)$ lies inside $P$
(Figure 5(b)),
then the part of $ej$ between $x$ and $z$
lies on $bC$ by Lemma 2, so $Finv ( y)$ is not an interior point of $B$.  $QED$
.LP
Edge endpoints in $bP cap bC$
and the images of boundary points of $B$ under $F$
are called $vertices$ of $bC$.
An argument similar to the proof of Lemma 3
shows that an edge can contain at most two vertices,
so the number of vertices of $bC$ is at most $2n$.
Let $p sub 1$ and $p sub 2$ be points in $bP$.
Suppose that for any $epsilon > 0$ there exist points
$q sub 1 , ~ q sub 2 member L sub O ( p sub 1 , p sub 2 )$
that do not lie in the interior of $P$
such that for $1 <= i <= 2$, $| p sub i - q sub i | < epsilon$.
If $trace ( p sub 1 , p sub 2 ) subset HP( p sub 2 , p sub 1 )$
and $trace ( p sub 2 , p sub 1 ) nosubset HP( p sub 2 , p sub 1 )$,
$trace ( p sub 1 , p sub 2 )$ is a $pouch$
(Figure 6(a));
if both $trace ( p sub 1 , p sub 2 ) subset HP( p sub 2 , p sub 1 )$
and $trace ( p sub 2 , p sub 1 ) subset HP( p sub 2 , p sub 1 )$,
and furthermore the interior of the region defined by $trace( p sub 1 , p sub 2 )$
and $L( p sub 1 , p sub 2 )$ does not intersect $trace( p sub 2 , p sub 1 )$,
$trace ( p sub 1 , p sub 2 )$ is also a $pouch$
The fringes show $HP( p sub 2 , p sub 1 )$.
.LP
$Lemma$ 4.
Suppose $p , q member bP$,
$trace(p,q)$ is a pouch,
and $trace sub O (p,q) cap L( p , q) ~=~ empty$.
Then $trace sub O (p,q) cap bC ~ = ~ empty $.
$Proof$.
Since $P$ is simple,
there must exist points $z$ and $w$ on the line
through $p$ and $q$ that lie on opposite sides
of the segment $L(p,q)$ such that $trace(z,w)$
lies in $HP(q,p)$ but outside the pouch:
if $trace sub O (q,p) nosubset HP(q,p)$,
$w$ and $z$ must exist by the Jordan curve theorem (Figure 7(a));
if $trace sub O (q,p) subset HP(q,p)$,
$z = q$ and $w = p$
by the definition of pouch (Figure 7(b)).
In either case any point on $trace sub O (p,q)$
lies inside the region defined by $trace(z,w)$
and $L(z,w)$,
and hence does not lie on $bC$.
$QED$
.LP
.EQ
define support /"\f(CWsupport\fP"/
define psupport /"\f(CWplane_support\fP"/
.EN
The construction uses two functions
\f(CWsupport\^(edge_1,\^edge_2)\fP,
and \f(CWplane_support\^(edge_1,\^edge_2)\fP,
where \f(CWedge_1\fP and \f(CWedge_2\fP are \f(CWedge\fPs.
(Type \f(CWedge\fP in the algorithm includes
edges of $P$ and line segments.)
Let $A$ be the set of all half planes that support
\f(CWedge_1\fP$cap S$
and \f(CWedge_2\fP$cap S$.
Function $psupport$ returns an element of $A$.
The boundaries of
elements of $A$ may be common tangents to both \f(CWedge\fPs,
lines through an endpoint of one \f(CWedge\fP and tangent to the other,
and lines through endpoints of both \f(CWedge\fPs.
Thus $A$ is finite unless the edges share an endpoint,
in which case the candidates for the result of $psupport$
are enumerated below.
Since operations to compute the possible elements of $A$
were assumed to have been given,
$psupport$ can be computed in $O(1)$ operations.
If every member of $A$ passes through a shared endpoint $x$ of
\f(CWedge_1\fP and \f(CWedge_2\fP and no other point of \f(CWedge_2\fP,
$psupport$ returns the containing half plane
whose boundary includes the tangent to \f(CWedge_1\fP at $x$
or the chord between $x$ and the other endpoint of \f(CWedge_1\fP
(The proof of Lemma 2 shows that at most one of these supports
\f(CWedge_1\fP and \f(CWedge_2\fP.),
unless that is $S$,
in which case $psupport$ returns the containing half plane
whose boundary is tangent to \f(CWedge_2\fP at $x$.
In the more usual case $psupport$ returns $HP(q,p) member A$
where $p member$\f(CWedge_1\fP
and $q member$\f(CWedge_2\fP,
with $p != q$ and
(\f(CWedge_1\fP$cup$\f(CWedge_2\fP)$cap S subset HP(q,p)$.
A less formal way to think of this computation is
to imagine some creature
standing at the first endpoint of \f(CWedge_1\fP
moving toward \f(CWedge_2\fP seeking a line of sight that touches
both edges and lies to their right;
the line of sight it finds is the boundary
of the half plane computed by $psupport$.
Function \f(CWsupport\^(edge_1,\^edge_2)\fP returns
$p member$\f(CWedge_1\fP
and
$q member$\f(CWedge_2\fP
corresponding to $p$ and $q$ in the computation of $psupport$ on those arguments.
If there is more than one way to choose $p$ and $q$,
$support$ returns the points $p$ and $q$ that maximize the length of the arc 
$Fpre ( trace (p,q))$.
.LP
.
.sp -1
.LP
\fBFigure 9:\fP
The results of $support$ and $psupport$ in several cases:
$support ( e sub 0 , e sub 1 )$ returns $s$ and $v sub 1$,
and $psupport$ is bounded by the line through them;
$support ( e sub 0 , e sub 2 )$ returns $v sub 1$ and $v sub 2$,
and $psupport$ is bounded by the line through them;
$support ( e sub 4 , e sub 5 )$ returns $v sub 4$ and $v sub 5$,
and $psupport$ is bounded by the line
that contains edge $e sub 4$;
$support ( e sub 4 , e sub 6 )$ returns $v sub 5$ and $x$,
and $psupport$ is bounded by the line through them.
Algorithm \f(CWImplicitHull\fP places on a stack
a sequence of $h$ edges of $P$
whose convex hull is $bD$,
hence the name $implicit$ $hull$.
(See Figure 10 and Lemma 5 below.)
.LP
.
.LP
\fBFigure 10:\fP
The implicit hull that determines $D$ in Figure 8.
.LP
As in [7]
the algorithm uses a function $next$
to refer to the second element on the stack.
The algorithm terminates when the input is exhausted.
.LP
.nr pP 0 1
.ds Pp "\\n+(pP	
.ta 0.4i 0.7i 1i 1.3i 1.6i 1.9i 2.2i 2.5i 2.8i 3.1i 3.4i 3.7i 4i
\*(Pp\f(CWImplicitHull\fP $( sej , ~ s , ~ t , ~ e sub m , ~ sejk )$
\*(Pp\f(CWinput sequence\fP $sej$
\*(Pp\f(CWstack\fP $sejk$
\*(Pp\f(CWpoint\fP $s, ~t$
\*(Pp\f(CWedge\fP $e sub m , ~ evar$
\*(Pp$begin$
\*(Pp	$sejk ~ <- ~ empty$
\*(Pp	$push ( L(s,t) , sejk )$
\*(Pp	$evar ~ <- ~ input$
\*(Pp	$while ~ evar cap HP sub O (s,t) = empty ~ do$
\*(Pp		$evar ~ <- ~ input$
\*(Pp	$push ( evar , sejk )$
\*(Pp	$loop ~ begin$
\*(Pp		$evar ~ <- ~ input$
\*(Pp		$while ~ next ( sejk ) != empty ~ do$
\*(Pp			$if ~ evar nosubset psupport ( top  ( sejk ),  next ( sejk )) ~ then$
\*(Pp				$pop ( sejk )$
\*(Pp		$if ~ evar nosubset psupport ( top ( sejk ), e sub m ) ~ then$
\*(Pp			$push ( evar , sejk )$
\*(Pp	$endloop$	
\*(Pp$end$
.sp 1
\*(Pp\f(CWConstructHull\fP $( sejk , ~ s , ~ t)$
\*(Pp\f(CWstack\fP $sejk$
\*(Pp\f(CWpoint\fP $s, ~ t, ~ p1 , ~ p2 , ~ op2$
\*(Pp\f(CWedge\fP $evar$
\*(Pp$begin$
\*(Pp	$evar ~ <- ~ top ( sejk )$
\*(Pp	$pop ( sejk )$
\*(Pp	$op2 ~ <- ~ t$
\*(Pp	$while ~ next ( sejk ) != empty ~ do ~ begin$
\*(Pp		$p2 , ~ p1 ~ <- ~ support ( top ( sejk ), evar )$
\*(Pp		$if ~ op2 ~ != ~ p1 ~ then$
\*(Pp			$if ~ trace sub O ( op2 , p1 ) nosubset HP( p1 , op2 ) ~ then$
\*(Pp				$output ~ trace ( op2 , p1 )$
\*(Pp			$else$
\*(Pp				$output ~ L ( op2 , p1 )$
\*(Pp		$if ~ p1 ~ != ~ p2 ~ then$
\*(Pp			$output ~ L( p1 , ~ p2 )$
\*(Pp		$op2 ~ <- ~ p2$
\*(Pp		$evar ~ <- ~ top ( sejk )$
\*(Pp		$pop ( sejk )$
\*(Pp	$end$
\*(Pp	$if ~ op2 ~ != ~ s ~ then$
\*(Pp		$if ~ trace sub O ( op2 , s ) nosubset HP( s , op2 ) ~ then$
\*(Pp			$output ~ trace ( op2 , s)$
\*(Pp		$else$
\*(Pp			$output ~ L ( op2 , s)$
\*(Pp$end$
.sp 1
If $E sub top$ and $E sub next$ are consecutive edges in $P$,
then $trace ( p sub top , p sub next )$ is a pouch by property (3)
of the edges.
The proof when $E sub top$ and $E sub next$ are not consecutive in $P$
is by induction on the number of edges pushed
after $E sub next$ is pushed but popped before $E sub top$ is pushed.
If there are no such edges,
then all edges in $P$ between $E sub next$ and $E sub top$
lie in $psupport ( E sub next , e sub m )$ by the test at line 18,
and $E sub top$ does not;
thus $trace ( support ( E sub next , E sub top ))$ is a pouch.
Take as induction hypothesis that if $k$ edges are both pushed and popped
after $E sub next$ is pushed but before $E sub top$ is pushed on top of it,
then $trace ( support ( E sub next , E sub top ))$ is a pouch.
Now consider the case when $k+1$ edges are pushed and popped
between $E sub next$ and $E sub top$.
Let $"{" E sub i "}" sub { 1 <= i <= j <= k }$
be the subsequence of edges of $P$
that are on the stack above $E sub next$ when $E sub top$
is input at line 14.
Then for $1 <= i <= j$,
$E sub top nosubset psupport ( E sub i , E sub i-1 )$ by line 16;
$E sub next nosubset psupport ( E sub scrl , e sub m )$ by line 18;
$trace ( support ( E sub next , E sub 1 ))$ and
$trace ( support ( E sub i , E sub i+1 ))$, $1 <= i < j$,
are pouches by the induction hypothesis.
It follows that $trace ( support ( E sub next , E sub top ))$ is a pouch.
$QED$
Line 16 tests new input edges against
the last pouches found.
It follows that if $E sub a$, $E sub b$ and $E sub c$
are three edges in input order such that
$trace ( support ( E sub a , E sub c ))$ is a pouch,
then $E sub b$ cannot be on the stack after $E sub c$
has been processed.
.LP
$Lemma$ 6.
Suppose some sequence of edges $sej sub 1<=j<=k$ has been processed.
Let $G(k)$ be the convex hull of $( sej sub 1<=j<=k cup L(s,t)) cap S$.
The stack contains precisely those edges that
contain a vertex of $bgk$.
$Proof$.
The proof is by induction on $k$.
When $k=0$ (at line 7), the lemma is trivially true.
Suppose the lemma holds for $k$,
and consider what happens when $e sub k+1$ is input.
If $bgk ~=~ partial G(k+1)$,
then the tests at lines 16 and 18 fail,
so the contents of the stack are unchanged,
and the lemma is true.
If $bgk ~!=~ partial G(k+1)$,
it follows from Lemma 4 that
the condition in line 18 is true with $evar = e sub k+1$,
so $e sub k+1$ is pushed onto $sejk$.
By Lemma 5, the contents of $sejk$ at line 21 after
$e sub k+1$ has been pushed determine a sequence of pouches
between vertices on $partial G(k+1)$.
$QED$
.LP
$Lemma$ 7.
If the stack $sejk$ contains the implicit hull for $D$,
then \f(CWConstructHull\fP
$( sejk ,s,t)$
outputs the part of $bD$ that lies on $bC$.
$L(s,t)$ is output if and only if
it is the only item on the stack.
$Proof$.
The output of algorithm \f(CWConstructHull\fP
is a sequence of line segments that support $P$,
as well as subedges and chords of edges of $P$
that lie on $bD$.
By Lemmas 2, 3, and 4,
the task of computing that part of
$bD$ that lies on $bC$ can be accomplished by  filling in the line
segments or subedges of $P$ connecting consecutive vertices of $bC cap D$.
Function \f(CWsupport\fP is defined so that
$p1$ and $p2$ are assigned (at line 10) to
consecutive vertices unless the segments $e$ and
\f(CWtop\fP
$( sejk )$ have a common endpoint,
$p$, which is also a vertex of $bC cap D$.
In this second case,
both $p1$ and $p2$ will be assigned to $p$.

et.gsize        627314300   9     1     100666  191       `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.gsize:
.EQ
gfont I
delim $$
.EN
.ps 15
box "$size 10 { M sub B}$" wid 1
box "$ gsize 10 M sub T$" wid 1
.ps 15
.EQ
gsize 10 { M sub B}
.EN
glop

et.slash        627314300   9     1     100666  2065      `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.slash:
.nf
.sp .5i
.EQ
gfont I
z+z-z/z/z>z<z>=z<=z->z<-z,z;z:z>>z<<z
.EN
.EQ
j+j-j/j/j>j<j>=j<=j->j<-j,j;j:j>>j<<j
.EN
.EQ
i+i-i/i/i>i<i>=i<=i->i<-i,i;i:i>>i<<i
.EN
.EQ
j+j-j/j/j>j<j>=j<=j->j<-j,j;j:j>>j<<j
.EN
.EQ
f+f-f/f/f>f<f>=f<=f->f<-f,f;f:f>>f<<f
.EN
.EQ
x+x-x/x/x>x<x>=x<=x->x<-x,x;x:x>>x<<x
.EN
.EQ
1+1-1/1/1>1<1>=1<=1->1<-1,1;1:1>>1<<1
.EN
.EQ
0+0-0/0/0>0<0>=0<=0->0<-0,0;0:0>>0<<0
.EN
.EQ
X+X-X/X/X>X<X>=X<=X->X<-X,X;X:X>>X<<X
.EN
.EQ
H+H-H/H/H>H<H>=H<=H->H<-H,H;H:H>>H<<H
.EN
.EQ
Y+Y-Y/Y/Y>Y<Y>=Y<=Y->Y<-Y,Y;Y:Y>>Y<<Y
.EN
.EQ
partial + partial - partial / partial / partial > partial < partial >= partial <= partial -> partial <- partial , partial ; partial : partial >> partial << partial 
.EN
.EQ
pi + pi - pi / pi / pi > pi < pi >= pi <= pi -> pi <- pi , pi ; pi : pi >> pi << pi 
.EN
.EQ
lambda + lambda - lambda / lambda / lambda > lambda < lambda >= lambda <= lambda -> lambda <- lambda , lambda ; lambda : lambda >> lambda << lambda 
.EN
.EQ
1/2 2/1 3/4 4/3 1/x x/2 x/n x/N N/2 N/x pi / 2
.EN
.sp 2
.EQ
gfont R
.EN
.EQ
z+z-z/z/z>z<z>=z<=z->z<-z,z;z:z>>z<<z
.EN
.EQ
j+j-j/j/j>j<j>=j<=j->j<-j,j;j:j>>j<<j
.EN
.EQ
i+i-i/i/i>i<i>=i<=i->i<-i,i;i:i>>i<<i
.EN
.EQ
j+j-j/j/j>j<j>=j<=j->j<-j,j;j:j>>j<<j
.EN
.EQ
f+f-f/f/f>f<f>=f<=f->f<-f,f;f:f>>f<<f
.EN
.EQ
x+x-x/x/x>x<x>=x<=x->x<-x,x;x:x>>x<<x
.EN
.EQ
1+1-1/1/1>1<1>=1<=1->1<-1,1;1:1>>1<<1
.EN
.EQ
0+0-0/0/0>0<0>=0<=0->0<-0,0;0:0>>0<<0
.EN
.EQ
X+X-X/X/X>X<X>=X<=X->X<-X,X;X:X>>X<<X
.EN
.EQ
H+H-H/H/H>H<H>=H<=H->H<-H,H;H:H>>H<<H
.EN
.EQ
Y+Y-Y/Y/Y>Y<Y>=Y<=Y->Y<-Y,Y;Y:Y>>Y<<Y
.EN
.EQ
partial + partial - partial / partial / partial > partial < partial >= partial <= partial -> partial <- partial , partial ; partial : partial >> partial << partial 
.EN
.EQ
pi + pi - pi / pi / pi > pi < pi >= pi <= pi -> pi <- pi , pi ; pi : pi >> pi << pi 
.EN
.EQ
lambda + lambda - lambda / lambda / lambda > lambda < lambda >= lambda <= lambda -> lambda <- lambda , lambda ; lambda : lambda >> lambda << lambda 
.EN

.EQ
1/2 2/1 3/4 4/3 1/x x/2 x/n x/N N/2 N/x pi / 2
.EN

compare.t       627314300   9     1     100777  171       `
for i in $*
do
	echo $i:
	eqn $i  >foo1
	a.out $i  >foo2
	troff foo1 >foo11
	troff foo2 >foo22
	if cmp foo11 foo22
	then
		echo good
	else
		diff foo1 foo2 | ind
	fi
done

et.brack        627314300   9     1     100666  1852      `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.brack:
.po .5i
.vs 20p
.sp
.EQ I
gfont I
left [ H over K right ]
~=~
left { H over K right }
~=~
left [ H over K right ] sup 2
~=~
left { H over K right } sup 2
~=~
left [ H over K over C right ]
~=~
left { H over K over C right }
~=~
left [ H over K over C right ] sup 2
~=~
left { H over K over C right } sup 2
~=~
left [ H over K over C over D right ]
~=~
left { H over K over C over D right }
~=~
left [ H over K over C over D right ] sup 2
~=~
left { H over K over C over D right } sup 2
.EN
.EQ I
1 over left [ H over K right ]
~=~
1 over left { H over K right }
~=~
1 over left [ H over K right ] sup 2
~=~
1 over left { H over K right } sup 2
~=~
1 over left [ H over K over C right ]
~=~
1 over left { H over K over C right }
~=~
1 over left [ H over K over C right ] sup 2
~=~
1 over left { H over K over C right } sup 2
~=~
1 over left [ H over K over C over D right ]
~=~
1 over left { H over K over C over D right }
~=~
1 over left [ H over K over C over D right ] sup 2
~=~
1 over left { H over K over C over D right } sup 2
.EN
.sp .5i
.EQ I
left [ H sup 2 sup 3 over K right ]
~=~
left { H sup 2 sup 3 over K right }
~=~
left [ H sup 2 sup 3 over K right ] sup 2
~=~
left { H sup 2 sup 3 over K right } sup 2
~=~
left [ H sup 2 sup 3 over K over C right ]
~=~
left { H sup 2 sup 3 over K over C right }
~=~
left [ H sup 2 sup 3 over K over C right ] sup 2
~=~
left { H sup 2 sup 3 over K over C right } sup 2
~=~
left [ H over K sup 2 sup 3 right ]
~=~
left { H over K sup 2 sup 3 right }
~=~
left [ H over K sup 2 sup 3 right ] sup 2
~=~
left { H over K sup 2 sup 3 right } sup 2
~=~
left [ H over K sup 2 sup 3 over C right ]
~=~
left { H over K sup 2 sup 3 over C right }
~=~
left [ H over K sup 2 sup 3 over C right ] sup 2
~=~
left { H over K sup 2 sup 3 over C right } sup 2
~=~
.EN
dg              627314300   9     1     100666  125       `
awk '
BEGIN {
	for (i = 41; i < 127; i++) {
		for (j = 41; j < 127; j++) {
			printf("%c%c", i, j);
		}
		printf("\n")
	}
}'

dg0             627314300   9     1     100666  15980     `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.dg0:
.nf
.po .5i
.EQ
)))*)+),)-).)/)0)1)2)3)4)5)6)7)8)9):);)<)=)>)?)@)A)B)C)D)E)F
)G)H)I)J)K)L)M)N)O)P)Q)R)S)T)U)V)W)X)Y)Z)[)\e)])^)_)`)a)b)c)
d)e)f)g)h)i)j)k)l)m)n)o)p)q)r)s)t)u)v)w)x)y)z){)|)})~
.EN
.EQ
*)***+*,*-*.*/*0*1*2*3*4*5*6*7*8*9*:*;*<*=*>*?*@*A*B*C*D*E*F
*G*H*I*J*K*L*M*N*O*P*Q*R*S*T*U*V*W*X*Y*Z*[*\e*]*^*_*`*a*b*c*
d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*{*|*}*~
.EN
.EQ
+)+*+++,+-+.+/+0+1+2+3+4+5+6+7+8+9+:+;+<+=+>+?+@+A+B+C+D+E+F
+G+H+I+J+K+L+M+N+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+\e+]+^+_+`+a+b+c+
d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+}+~
.EN
.EQ
,),*,+,,,-,.,/,0,1,2,3,4,5,6,7,8,9,:,;,<,=,>,?,@,A,B,C,D,E,F
,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,[,\e,],^,_,`,a,b,c,
d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,{,|,},~
.EN
.EQ
-)-*-+-,---.-/-0-1-2-3-4-5-6-7-8-9-:-;-<-=->-?-@-A-B-C-D-E-F
-G-H-I-J-K-L-M-N-O-P-Q-R-S-T-U-V-W-X-Y-Z-[-\e-]-^-_-`-a-b-c-
d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z-{-|-}-~
.EN
.EQ
.).*.+.,.-.../.0.1.2.3.4.5.6.7.8.9.:.;.<.=.>.?.@.A.B.C.D.E.F
.G.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.[.\e.].^._.`.a.b.c.
d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.{.|.}.~
.EN
.EQ
/)/*/+/,/-/.///0/1/2/3/4/5/6/7/8/9/:/;/</=/>/?/@/A/B/C/D/E/F
/G/H/I/J/K/L/M/N/O/P/Q/R/S/T/U/V/W/X/Y/Z/[/\e/]/^/_/`/a/b/c/
d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/{/|/}/~
.EN
.EQ
0)0*0+0,0-0.0/000102030405060708090:0;0<0=0>0?0@0A0B0C0D0E0F
0G0H0I0J0K0L0M0N0O0P0Q0R0S0T0U0V0W0X0Y0Z0[0\e0]0^0_0`0a0b0c0
d0e0f0g0h0i0j0k0l0m0n0o0p0q0r0s0t0u0v0w0x0y0z0{0|0}0~
.EN
.EQ
1)1*1+1,1-1.1/101112131415161718191:1;1<1=1>1?1@1A1B1C1D1E1F
1G1H1I1J1K1L1M1N1O1P1Q1R1S1T1U1V1W1X1Y1Z1[1\e1]1^1_1`1a1b1c1
d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1{1|1}1~
.EN
.EQ
2)2*2+2,2-2.2/202122232425262728292:2;2<2=2>2?2@2A2B2C2D2E2F
2G2H2I2J2K2L2M2N2O2P2Q2R2S2T2U2V2W2X2Y2Z2[2\e2]2^2_2`2a2b2c2
d2e2f2g2h2i2j2k2l2m2n2o2p2q2r2s2t2u2v2w2x2y2z2{2|2}2~
.EN
.EQ
3)3*3+3,3-3.3/303132333435363738393:3;3<3=3>3?3@3A3B3C3D3E3F
3G3H3I3J3K3L3M3N3O3P3Q3R3S3T3U3V3W3X3Y3Z3[3\e3]3^3_3`3a3b3c3
d3e3f3g3h3i3j3k3l3m3n3o3p3q3r3s3t3u3v3w3x3y3z3{3|3}3~
.EN
.EQ
4)4*4+4,4-4.4/404142434445464748494:4;4<4=4>4?4@4A4B4C4D4E4F
4G4H4I4J4K4L4M4N4O4P4Q4R4S4T4U4V4W4X4Y4Z4[4\e4]4^4_4`4a4b4c4
d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x4y4z4{4|4}4~
.EN
.EQ
5)5*5+5,5-5.5/505152535455565758595:5;5<5=5>5?5@5A5B5C5D5E5F
5G5H5I5J5K5L5M5N5O5P5Q5R5S5T5U5V5W5X5Y5Z5[5\e5]5^5_5`5a5b5c5
d5e5f5g5h5i5j5k5l5m5n5o5p5q5r5s5t5u5v5w5x5y5z5{5|5}5~
.EN
.EQ
6)6*6+6,6-6.6/606162636465666768696:6;6<6=6>6?6@6A6B6C6D6E6F
6G6H6I6J6K6L6M6N6O6P6Q6R6S6T6U6V6W6X6Y6Z6[6\e6]6^6_6`6a6b6c6
d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6w6x6y6z6{6|6}6~
.EN
.EQ
7)7*7+7,7-7.7/707172737475767778797:7;7<7=7>7?7@7A7B7C7D7E7F
7G7H7I7J7K7L7M7N7O7P7Q7R7S7T7U7V7W7X7Y7Z7[7\e7]7^7_7`7a7b7c7
d7e7f7g7h7i7j7k7l7m7n7o7p7q7r7s7t7u7v7w7x7y7z7{7|7}7~
.EN
.EQ
8)8*8+8,8-8.8/808182838485868788898:8;8<8=8>8?8@8A8B8C8D8E8F
8G8H8I8J8K8L8M8N8O8P8Q8R8S8T8U8V8W8X8Y8Z8[8\e8]8^8_8`8a8b8c8
d8e8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}8~
.EN
.EQ
9)9*9+9,9-9.9/909192939495969798999:9;9<9=9>9?9@9A9B9C9D9E9F
9G9H9I9J9K9L9M9N9O9P9Q9R9S9T9U9V9W9X9Y9Z9[9\e9]9^9_9`9a9b9c9
d9e9f9g9h9i9j9k9l9m9n9o9p9q9r9s9t9u9v9w9x9y9z9{9|9}9~
.EN
.EQ
:):*:+:,:-:.:/:0:1:2:3:4:5:6:7:8:9:::;:<:=:>:?:@:A:B:C:D:E:F
:G:H:I:J:K:L:M:N:O:P:Q:R:S:T:U:V:W:X:Y:Z:[:\e:]:^:_:`:a:b:c:
d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:}:~
.EN
.EQ
;);*;+;,;-;.;/;0;1;2;3;4;5;6;7;8;9;:;;;<;=;>;?;@;A;B;C;D;E;F
;G;H;I;J;K;L;M;N;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;\e;];^;_;`;a;b;c;
d;e;f;g;h;i;j;k;l;m;n;o;p;q;r;s;t;u;v;w;x;y;z;{;|;};~
.EN
.EQ
<)<*<+<,<-<.</<0<1<2<3<4<5<6<7<8<9<:<;<<<=<><?<@<A<B<C<D<E<F
<G<H<I<J<K<L<M<N<O<P<Q<R<S<T<U<V<W<X<Y<Z<[<\e<]<^<_<`<a<b<c<
d<e<f<g<h<i<j<k<l<m<n<o<p<q<r<s<t<u<v<w<x<y<z<{<|<}<~
.EN
.EQ
=)=*=+=,=-=.=/=0=1=2=3=4=5=6=7=8=9=:=;=<===>=?=@=A=B=C=D=E=F
=G=H=I=J=K=L=M=N=O=P=Q=R=S=T=U=V=W=X=Y=Z=[=\e=]=^=_=`=a=b=c=
d=e=f=g=h=i=j=k=l=m=n=o=p=q=r=s=t=u=v=w=x=y=z={=|=}=~
.EN
.EQ
>)>*>+>,>->.>/>0>1>2>3>4>5>6>7>8>9>:>;><>=>>>?>@>A>B>C>D>E>F
>G>H>I>J>K>L>M>N>O>P>Q>R>S>T>U>V>W>X>Y>Z>[>\e>]>^>_>`>a>b>c>
d>e>f>g>h>i>j>k>l>m>n>o>p>q>r>s>t>u>v>w>x>y>z>{>|>}>~
.EN
.EQ
?)?*?+?,?-?.?/?0?1?2?3?4?5?6?7?8?9?:?;?<?=?>???@?A?B?C?D?E?F
?G?H?I?J?K?L?M?N?O?P?Q?R?S?T?U?V?W?X?Y?Z?[?\e?]?^?_?`?a?b?c?
d?e?f?g?h?i?j?k?l?m?n?o?p?q?r?s?t?u?v?w?x?y?z?{?|?}?~
.EN
.EQ
@)@*@+@,@-@.@/@0@1@2@3@4@5@6@7@8@9@:@;@<@=@>@?@@@A@B@C@D@E@F
@G@H@I@J@K@L@M@N@O@P@Q@R@S@T@U@V@W@X@Y@Z@[@\e@]@^@_@`@a@b@c@
d@e@f@g@h@i@j@k@l@m@n@o@p@q@r@s@t@u@v@w@x@y@z@{@|@}@~
.EN
.EQ
A)A*A+A,A-A.A/A0A1A2A3A4A5A6A7A8A9A:A;A<A=A>A?A@AAABACADAEAF
AGAHAIAJAKALAMANAOAPAQARASATAUAVAWAXAYAZA[A\eA]A^A_A`AaAbAcA
dAeAfAgAhAiAjAkAlAmAnAoApAqArAsAtAuAvAwAxAyAzA{A|A}A~
.EN
.EQ
B)B*B+B,B-B.B/B0B1B2B3B4B5B6B7B8B9B:B;B<B=B>B?B@BABBBCBDBEBF
BGBHBIBJBKBLBMBNBOBPBQBRBSBTBUBVBWBXBYBZB[B\eB]B^B_B`BaBbBcB
dBeBfBgBhBiBjBkBlBmBnBoBpBqBrBsBtBuBvBwBxByBzB{B|B}B~
.EN
.EQ
C)C*C+C,C-C.C/C0C1C2C3C4C5C6C7C8C9C:C;C<C=C>C?C@CACBCCCDCECF
CGCHCICJCKCLCMCNCOCPCQCRCSCTCUCVCWCXCYCZC[C\eC]C^C_C`CaCbCcC
dCeCfCgChCiCjCkClCmCnCoCpCqCrCsCtCuCvCwCxCyCzC{C|C}C~
.EN
.EQ
D)D*D+D,D-D.D/D0D1D2D3D4D5D6D7D8D9D:D;D<D=D>D?D@DADBDCDDDEDF
DGDHDIDJDKDLDMDNDODPDQDRDSDTDUDVDWDXDYDZD[D\eD]D^D_D`DaDbDcD
dDeDfDgDhDiDjDkDlDmDnDoDpDqDrDsDtDuDvDwDxDyDzD{D|D}D~
.EN
.EQ
E)E*E+E,E-E.E/E0E1E2E3E4E5E6E7E8E9E:E;E<E=E>E?E@EAEBECEDEEEF
EGEHEIEJEKELEMENEOEPEQERESETEUEVEWEXEYEZE[E\eE]E^E_E`EaEbEcE
dEeEfEgEhEiEjEkElEmEnEoEpEqErEsEtEuEvEwExEyEzE{E|E}E~
.EN
.EQ
F)F*F+F,F-F.F/F0F1F2F3F4F5F6F7F8F9F:F;F<F=F>F?F@FAFBFCFDFEFF
FGFHFIFJFKFLFMFNFOFPFQFRFSFTFUFVFWFXFYFZF[F\eF]F^F_F`FaFbFcF
dFeFfFgFhFiFjFkFlFmFnFoFpFqFrFsFtFuFvFwFxFyFzF{F|F}F~
.EN
.EQ
G)G*G+G,G-G.G/G0G1G2G3G4G5G6G7G8G9G:G;G<G=G>G?G@GAGBGCGDGEGF
GGGHGIGJGKGLGMGNGOGPGQGRGSGTGUGVGWGXGYGZG[G\eG]G^G_G`GaGbGcG
dGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}G~
.EN
.EQ
H)H*H+H,H-H.H/H0H1H2H3H4H5H6H7H8H9H:H;H<H=H>H?H@HAHBHCHDHEHF
HGHHHIHJHKHLHMHNHOHPHQHRHSHTHUHVHWHXHYHZH[H\eH]H^H_H`HaHbHcH
dHeHfHgHhHiHjHkHlHmHnHoHpHqHrHsHtHuHvHwHxHyHzH{H|H}H~
.EN
.EQ
I)I*I+I,I-I.I/I0I1I2I3I4I5I6I7I8I9I:I;I<I=I>I?I@IAIBICIDIEIF
IGIHIIIJIKILIMINIOIPIQIRISITIUIVIWIXIYIZI[I\eI]I^I_I`IaIbIcI
dIeIfIgIhIiIjIkIlImInIoIpIqIrIsItIuIvIwIxIyIzI{I|I}I~
.EN
.EQ
J)J*J+J,J-J.J/J0J1J2J3J4J5J6J7J8J9J:J;J<J=J>J?J@JAJBJCJDJEJF
JGJHJIJJJKJLJMJNJOJPJQJRJSJTJUJVJWJXJYJZJ[J\eJ]J^J_J`JaJbJcJ
dJeJfJgJhJiJjJkJlJmJnJoJpJqJrJsJtJuJvJwJxJyJzJ{J|J}J~
.EN
.EQ
K)K*K+K,K-K.K/K0K1K2K3K4K5K6K7K8K9K:K;K<K=K>K?K@KAKBKCKDKEKF
KGKHKIKJKKKLKMKNKOKPKQKRKSKTKUKVKWKXKYKZK[K\eK]K^K_K`KaKbKcK
dKeKfKgKhKiKjKkKlKmKnKoKpKqKrKsKtKuKvKwKxKyKzK{K|K}K~
.EN
.EQ
L)L*L+L,L-L.L/L0L1L2L3L4L5L6L7L8L9L:L;L<L=L>L?L@LALBLCLDLELF
LGLHLILJLKLLLMLNLOLPLQLRLSLTLULVLWLXLYLZL[L\eL]L^L_L`LaLbLcL
dLeLfLgLhLiLjLkLlLmLnLoLpLqLrLsLtLuLvLwLxLyLzL{L|L}L~
.EN
.EQ
M)M*M+M,M-M.M/M0M1M2M3M4M5M6M7M8M9M:M;M<M=M>M?M@MAMBMCMDMEMF
MGMHMIMJMKMLMMMNMOMPMQMRMSMTMUMVMWMXMYMZM[M\eM]M^M_M`MaMbMcM
dMeMfMgMhMiMjMkMlMmMnMoMpMqMrMsMtMuMvMwMxMyMzM{M|M}M~
.EN
.EQ
N)N*N+N,N-N.N/N0N1N2N3N4N5N6N7N8N9N:N;N<N=N>N?N@NANBNCNDNENF
NGNHNINJNKNLNMNNNONPNQNRNSNTNUNVNWNXNYNZN[N\eN]N^N_N`NaNbNcN
dNeNfNgNhNiNjNkNlNmNnNoNpNqNrNsNtNuNvNwNxNyNzN{N|N}N~
.EN
.EQ
O)O*O+O,O-O.O/O0O1O2O3O4O5O6O7O8O9O:O;O<O=O>O?O@OAOBOCODOEOF
OGOHOIOJOKOLOMONOOOPOQOROSOTOUOVOWOXOYOZO[O\eO]O^O_O`OaObOcO
dOeOfOgOhOiOjOkOlOmOnOoOpOqOrOsOtOuOvOwOxOyOzO{O|O}O~
.EN
.EQ
P)P*P+P,P-P.P/P0P1P2P3P4P5P6P7P8P9P:P;P<P=P>P?P@PAPBPCPDPEPF
PGPHPIPJPKPLPMPNPOPPPQPRPSPTPUPVPWPXPYPZP[P\eP]P^P_P`PaPbPcP
dPePfPgPhPiPjPkPlPmPnPoPpPqPrPsPtPuPvPwPxPyPzP{P|P}P~
.EN
.EQ
Q)Q*Q+Q,Q-Q.Q/Q0Q1Q2Q3Q4Q5Q6Q7Q8Q9Q:Q;Q<Q=Q>Q?Q@QAQBQCQDQEQF
QGQHQIQJQKQLQMQNQOQPQQQRQSQTQUQVQWQXQYQZQ[Q\eQ]Q^Q_Q`QaQbQcQ
dQeQfQgQhQiQjQkQlQmQnQoQpQqQrQsQtQuQvQwQxQyQzQ{Q|Q}Q~
.EN
.EQ
R)R*R+R,R-R.R/R0R1R2R3R4R5R6R7R8R9R:R;R<R=R>R?R@RARBRCRDRERF
RGRHRIRJRKRLRMRNRORPRQRRRSRTRURVRWRXRYRZR[R\eR]R^R_R`RaRbRcR
dReRfRgRhRiRjRkRlRmRnRoRpRqRrRsRtRuRvRwRxRyRzR{R|R}R~
.EN
.EQ
S)S*S+S,S-S.S/S0S1S2S3S4S5S6S7S8S9S:S;S<S=S>S?S@SASBSCSDSESF
SGSHSISJSKSLSMSNSOSPSQSRSSSTSUSVSWSXSYSZS[S\eS]S^S_S`SaSbScS
dSeSfSgShSiSjSkSlSmSnSoSpSqSrSsStSuSvSwSxSySzS{S|S}S~
.EN
.EQ
T)T*T+T,T-T.T/T0T1T2T3T4T5T6T7T8T9T:T;T<T=T>T?T@TATBTCTDTETF
TGTHTITJTKTLTMTNTOTPTQTRTSTTTUTVTWTXTYTZT[T\eT]T^T_T`TaTbTcT
dTeTfTgThTiTjTkTlTmTnToTpTqTrTsTtTuTvTwTxTyTzT{T|T}T~
.EN
.EQ
U)U*U+U,U-U.U/U0U1U2U3U4U5U6U7U8U9U:U;U<U=U>U?U@UAUBUCUDUEUF
UGUHUIUJUKULUMUNUOUPUQURUSUTUUUVUWUXUYUZU[U\eU]U^U_U`UaUbUcU
dUeUfUgUhUiUjUkUlUmUnUoUpUqUrUsUtUuUvUwUxUyUzU{U|U}U~
.EN
.EQ
V)V*V+V,V-V.V/V0V1V2V3V4V5V6V7V8V9V:V;V<V=V>V?V@VAVBVCVDVEVF
VGVHVIVJVKVLVMVNVOVPVQVRVSVTVUVVVWVXVYVZV[V\eV]V^V_V`VaVbVcV
dVeVfVgVhViVjVkVlVmVnVoVpVqVrVsVtVuVvVwVxVyVzV{V|V}V~
.EN
.EQ
W)W*W+W,W-W.W/W0W1W2W3W4W5W6W7W8W9W:W;W<W=W>W?W@WAWBWCWDWEWF
WGWHWIWJWKWLWMWNWOWPWQWRWSWTWUWVWWWXWYWZW[W\eW]W^W_W`WaWbWcW
dWeWfWgWhWiWjWkWlWmWnWoWpWqWrWsWtWuWvWwWxWyWzW{W|W}W~
.EN
.EQ
X)X*X+X,X-X.X/X0X1X2X3X4X5X6X7X8X9X:X;X<X=X>X?X@XAXBXCXDXEXF
XGXHXIXJXKXLXMXNXOXPXQXRXSXTXUXVXWXXXYXZX[X\eX]X^X_X`XaXbXcX
dXeXfXgXhXiXjXkXlXmXnXoXpXqXrXsXtXuXvXwXxXyXzX{X|X}X~
.EN
.EQ
Y)Y*Y+Y,Y-Y.Y/Y0Y1Y2Y3Y4Y5Y6Y7Y8Y9Y:Y;Y<Y=Y>Y?Y@YAYBYCYDYEYF
YGYHYIYJYKYLYMYNYOYPYQYRYSYTYUYVYWYXYYYZY[Y\eY]Y^Y_Y`YaYbYcY
dYeYfYgYhYiYjYkYlYmYnYoYpYqYrYsYtYuYvYwYxYyYzY{Y|Y}Y~
.EN
.EQ
Z)Z*Z+Z,Z-Z.Z/Z0Z1Z2Z3Z4Z5Z6Z7Z8Z9Z:Z;Z<Z=Z>Z?Z@ZAZBZCZDZEZF
ZGZHZIZJZKZLZMZNZOZPZQZRZSZTZUZVZWZXZYZZZ[Z\eZ]Z^Z_Z`ZaZbZcZ
dZeZfZgZhZiZjZkZlZmZnZoZpZqZrZsZtZuZvZwZxZyZzZ{Z|Z}Z~
.EN
.EQ
[)[*[+[,[-[.[/[0[1[2[3[4[5[6[7[8[9[:[;[<[=[>[?[@[A[B[C[D[E[F
[G[H[I[J[K[L[M[N[O[P[Q[R[S[T[U[V[W[X[Y[Z[[[\e[][^[_[`[a[b[c[
d[e[f[g[h[i[j[k[l[m[n[o[p[q[r[s[t[u[v[w[x[y[z[{[|[}[~
.EN
.EQ
\e)\e*\e+\e,\e-\e.\e/\e0\e1\e2\e3\e4\e5\e6\e7\e8\e9\e:\e;\e<
\e=\e>\e?\e@\eA\eB\eC\eD\eE\eF\eG\eH\eI\eJ\eK\eL\eM\eN\eO\eP
\eQ\eR\eS\eT\eU\eV\eW\eX\eY\eZ\e[\e\e\e]\e^\e_\e`\ea\eb\ec\e
d\ee\ef\eg\eh\ei\ej\ek\el\em\en\eo\ep\eq\er\es\et\eu\ev\ew\e
x\ey\ez\e{\e|\e}\e~
.EN
.EQ
])]*]+],]-].]/]0]1]2]3]4]5]6]7]8]9]:];]<]=]>]?]@]A]B]C]D]E]F
]G]H]I]J]K]L]M]N]O]P]Q]R]S]T]U]V]W]X]Y]Z][]\e]]]^]_]`]a]b]c]
d]e]f]g]h]i]j]k]l]m]n]o]p]q]r]s]t]u]v]w]x]y]z]{]|]}]~
.EN
.EQ
^)^*^+^,^-^.^/^0^1^2^3^4^5^6^7^8^9^:^;^<^=^>^?^@^A^B^C^D^E^F
^G^H^I^J^K^L^M^N^O^P^Q^R^S^T^U^V^W^X^Y^Z^[^\e^]^^^_^`^a^b^c^
d^e^f^g^h^i^j^k^l^m^n^o^p^q^r^s^t^u^v^w^x^y^z^{^|^}^~
.EN
.EQ
_)_*_+_,_-_._/_0_1_2_3_4_5_6_7_8_9_:_;_<_=_>_?_@_A_B_C_D_E_F
_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V_W_X_Y_Z_[_\e_]_^___`_a_b_c_
d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_{_|_}_~
.EN
.EQ
`)`*`+`,`-`.`/`0`1`2`3`4`5`6`7`8`9`:`;`<`=`>`?`@`A`B`C`D`E`F
`G`H`I`J`K`L`M`N`O`P`Q`R`S`T`U`V`W`X`Y`Z`[`\e`]`^`_```a`b`c`
d`e`f`g`h`i`j`k`l`m`n`o`p`q`r`s`t`u`v`w`x`y`z`{`|`}`~
.EN
.EQ
a)a*a+a,a-a.a/a0a1a2a3a4a5a6a7a8a9a:a;a<a=a>a?a@aAaBaCaDaEaF
aGaHaIaJaKaLaMaNaOaPaQaRaSaTaUaVaWaXaYaZa[a\ea]a^a_a`aaabaca
daeafagahaiajakalamanaoapaqarasatauavawaxayaza{a|a}a~
.EN
.EQ
b)b*b+b,b-b.b/b0b1b2b3b4b5b6b7b8b9b:b;b<b=b>b?b@bAbBbCbDbEbF
bGbHbIbJbKbLbMbNbObPbQbRbSbTbUbVbWbXbYbZb[b\eb]b^b_b`babbbcb
dbebfbgbhbibjbkblbmbnbobpbqbrbsbtbubvbwbxbybzb{b|b}b~
.EN
.EQ
c)c*c+c,c-c.c/c0c1c2c3c4c5c6c7c8c9c:c;c<c=c>c?c@cAcBcCcDcEcF
cGcHcIcJcKcLcMcNcOcPcQcRcScTcUcVcWcXcYcZc[c\ec]c^c_c`cacbccc
dcecfcgchcicjckclcmcncocpcqcrcsctcucvcwcxcyczc{c|c}c~
.EN
.EQ
d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdF
dGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\ed]d^d_d`dadbdcd
ddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdwdxdydzd{d|d}d~
.EN
.EQ
e)e*e+e,e-e.e/e0e1e2e3e4e5e6e7e8e9e:e;e<e=e>e?e@eAeBeCeDeEeF
eGeHeIeJeKeLeMeNeOePeQeReSeTeUeVeWeXeYeZe[e\ee]e^e_e`eaebece
deeefegeheiejekelemeneoepeqereseteuevewexeyeze{e|e}e~
.EN
.EQ
f)f*f+f,f-f.f/f0f1f2f3f4f5f6f7f8f9f:f;f<f=f>f?f@fAfBfCfDfEfF
fGfHfIfJfKfLfMfNfOfPfQfRfSfTfUfVfWfXfYfZf[f\ef]f^f_f`fafbfcf
dfefffgfhfifjfkflfmfnfofpfqfrfsftfufvfwfxfyfzf{f|f}f~
.EN
.EQ
g)g*g+g,g-g.g/g0g1g2g3g4g5g6g7g8g9g:g;g<g=g>g?g@gAgBgCgDgEgF
gGgHgIgJgKgLgMgNgOgPgQgRgSgTgUgVgWgXgYgZg[g\eg]g^g_g`gagbgcg
dgegfggghgigjgkglgmgngogpgqgrgsgtgugvgwgxgygzg{g|g}g~
.EN
.EQ
h)h*h+h,h-h.h/h0h1h2h3h4h5h6h7h8h9h:h;h<h=h>h?h@hAhBhChDhEhF
hGhHhIhJhKhLhMhNhOhPhQhRhShThUhVhWhXhYhZh[h\eh]h^h_h`hahbhch
dhehfhghhhihjhkhlhmhnhohphqhrhshthuhvhwhxhyhzh{h|h}h~
.EN
.EQ
i)i*i+i,i-i.i/i0i1i2i3i4i5i6i7i8i9i:i;i<i=i>i?i@iAiBiCiDiEiF
iGiHiIiJiKiLiMiNiOiPiQiRiSiTiUiViWiXiYiZi[i\ei]i^i_i`iaibici
dieifigihiiijikiliminioipiqirisitiuiviwixiyizi{i|i}i~
.EN
.EQ
j)j*j+j,j-j.j/j0j1j2j3j4j5j6j7j8j9j:j;j<j=j>j?j@jAjBjCjDjEjF
jGjHjIjJjKjLjMjNjOjPjQjRjSjTjUjVjWjXjYjZj[j\ej]j^j_j`jajbjcj
djejfjgjhjijjjkjljmjnjojpjqjrjsjtjujvjwjxjyjzj{j|j}j~
.EN
.EQ
k)k*k+k,k-k.k/k0k1k2k3k4k5k6k7k8k9k:k;k<k=k>k?k@kAkBkCkDkEkF
kGkHkIkJkKkLkMkNkOkPkQkRkSkTkUkVkWkXkYkZk[k\ek]k^k_k`kakbkck
dkekfkgkhkikjkkklkmknkokpkqkrksktkukvkwkxkykzk{k|k}k~
.EN
.EQ
l)l*l+l,l-l.l/l0l1l2l3l4l5l6l7l8l9l:l;l<l=l>l?l@lAlBlClDlElF
lGlHlIlJlKlLlMlNlOlPlQlRlSlTlUlVlWlXlYlZl[l\el]l^l_l`lalblcl
dlelflglhliljlklllmlnlolplqlrlsltlulvlwlxlylzl{l|l}l~
.EN
.EQ
m)m*m+m,m-m.m/m0m1m2m3m4m5m6m7m8m9m:m;m<m=m>m?m@mAmBmCmDmEmF
mGmHmImJmKmLmMmNmOmPmQmRmSmTmUmVmWmXmYmZm[m\em]m^m_m`mambmcm
dmemfmgmhmimjmkmlmmmnmompmqmrmsmtmumvmwmxmymzm{m|m}m~
.EN
.EQ
n)n*n+n,n-n.n/n0n1n2n3n4n5n6n7n8n9n:n;n<n=n>n?n@nAnBnCnDnEnF
nGnHnInJnKnLnMnNnOnPnQnRnSnTnUnVnWnXnYnZn[n\en]n^n_n`nanbncn
dnenfngnhninjnknlnmnnnonpnqnrnsntnunvnwnxnynzn{n|n}n~
.EN
.EQ
o)o*o+o,o-o.o/o0o1o2o3o4o5o6o7o8o9o:o;o<o=o>o?o@oAoBoCoDoEoF
oGoHoIoJoKoLoMoNoOoPoQoRoSoToUoVoWoXoYoZo[o\eo]o^o_o`oaoboco
doeofogohoiojokolomonooopoqorosotouovowoxoyozo{o|o}o~
.EN
.EQ
p)p*p+p,p-p.p/p0p1p2p3p4p5p6p7p8p9p:p;p<p=p>p?p@pApBpCpDpEpF
pGpHpIpJpKpLpMpNpOpPpQpRpSpTpUpVpWpXpYpZp[p\ep]p^p_p`papbpcp
dpepfpgphpipjpkplpmpnpopppqprpsptpupvpwpxpypzp{p|p}p~
.EN
.EQ
q)q*q+q,q-q.q/q0q1q2q3q4q5q6q7q8q9q:q;q<q=q>q?q@qAqBqCqDqEqF
qGqHqIqJqKqLqMqNqOqPqQqRqSqTqUqVqWqXqYqZq[q\eq]q^q_q`qaqbqcq
dqeqfqgqhqiqjqkqlqmqnqoqpqqqrqsqtquqvqwqxqyqzq{q|q}q~
.EN
.EQ
r)r*r+r,r-r.r/r0r1r2r3r4r5r6r7r8r9r:r;r<r=r>r?r@rArBrCrDrErF
rGrHrIrJrKrLrMrNrOrPrQrRrSrTrUrVrWrXrYrZr[r\er]r^r_r`rarbrcr
drerfrgrhrirjrkrlrmrnrorprqrrrsrtrurvrwrxryrzr{r|r}r~
.EN
.EQ
s)s*s+s,s-s.s/s0s1s2s3s4s5s6s7s8s9s:s;s<s=s>s?s@sAsBsCsDsEsF
sGsHsIsJsKsLsMsNsOsPsQsRsSsTsUsVsWsXsYsZs[s\es]s^s_s`sasbscs
dsesfsgshsisjskslsmsnsospsqsrssstsusvswsxsyszs{s|s}s~
.EN
.EQ
t)t*t+t,t-t.t/t0t1t2t3t4t5t6t7t8t9t:t;t<t=t>t?t@tAtBtCtDtEtF
tGtHtItJtKtLtMtNtOtPtQtRtStTtUtVtWtXtYtZt[t\et]t^t_t`tatbtct
dtetftgthtitjtktltmtntotptqtrtstttutvtwtxtytzt{t|t}t~
.EN
.EQ
u)u*u+u,u-u.u/u0u1u2u3u4u5u6u7u8u9u:u;u<u=u>u?u@uAuBuCuDuEuF
uGuHuIuJuKuLuMuNuOuPuQuRuSuTuUuVuWuXuYuZu[u\eu]u^u_u`uaubucu
dueufuguhuiujukulumunuoupuqurusutuuuvuwuxuyuzu{u|u}u~
.EN
.EQ
v)v*v+v,v-v.v/v0v1v2v3v4v5v6v7v8v9v:v;v<v=v>v?v@vAvBvCvDvEvF
vGvHvIvJvKvLvMvNvOvPvQvRvSvTvUvVvWvXvYvZv[v\ev]v^v_v`vavbvcv
dvevfvgvhvivjvkvlvmvnvovpvqvrvsvtvuvvvwvxvyvzv{v|v}v~
.EN
.EQ
w)w*w+w,w-w.w/w0w1w2w3w4w5w6w7w8w9w:w;w<w=w>w?w@wAwBwCwDwEwF
wGwHwIwJwKwLwMwNwOwPwQwRwSwTwUwVwWwXwYwZw[w\ew]w^w_w`wawbwcw
dwewfwgwhwiwjwkwlwmwnwowpwqwrwswtwuwvwwwxwywzw{w|w}w~
.EN
.EQ
x)x*x+x,x-x.x/x0x1x2x3x4x5x6x7x8x9x:x;x<x=x>x?x@xAxBxCxDxExF
xGxHxIxJxKxLxMxNxOxPxQxRxSxTxUxVxWxXxYxZx[x\ex]x^x_x`xaxbxcx
dxexfxgxhxixjxkxlxmxnxoxpxqxrxsxtxuxvxwxxxyxzx{x|x}x~
.EN
.EQ
y)y*y+y,y-y.y/y0y1y2y3y4y5y6y7y8y9y:y;y<y=y>y?y@yAyByCyDyEyF
yGyHyIyJyKyLyMyNyOyPyQyRySyTyUyVyWyXyYyZy[y\ey]y^y_y`yaybycy
dyeyfygyhyiyjykylymynyoypyqyrysytyuyvywyxyyyzy{y|y}y~
.EN
.EQ
z)z*z+z,z-z.z/z0z1z2z3z4z5z6z7z8z9z:z;z<z=z>z?z@zAzBzCzDzEzF
zGzHzIzJzKzLzMzNzOzPzQzRzSzTzUzVzWzXzYzZz[z\ez]z^z_z`zazbzcz
dzezfzgzhzizjzkzlzmznzozpzqzrzsztzuzvzwzxzyzzz{z|z}z~
.EN
.EQ
{){*{+{,{-{.{/{0{1{2{3{4{5{6{7{8{9{:{;{<{={>{?{@{A{B{C{D{E{F
{G{H{I{J{K{L{M{N{O{P{Q{R{S{T{U{V{W{X{Y{Z{[{\e{]{^{_{`{a{b{c{
d{e{f{g{h{i{j{k{l{m{n{o{p{q{r{s{t{u{v{w{x{y{z{{{|{}{~
.EN
.EQ
|)|*|+|,|-|.|/|0|1|2|3|4|5|6|7|8|9|:|;|<|=|>|?|@|A|B|C|D|E|F
|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|[|\e|]|^|_|`|a|b|c|
d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|{|||}|~
.EN
.EQ
})}*}+},}-}.}/}0}1}2}3}4}5}6}7}8}9}:};}<}=}>}?}@}A}B}C}D}E}F
}G}H}I}J}K}L}M}N}O}P}Q}R}S}T}U}V}W}X}Y}Z}[}\e}]}^}_}`}a}b}c}
d}e}f}g}h}i}j}k}l}m}n}o}p}q}r}s}t}u}v}w}x}y}z}{}|}}}~
.EN
.EQ
~)~*~+~,~-~.~/~0~1~2~3~4~5~6~7~8~9~:~;~<~=~>~?~@~A~B~C~D~E~F
~G~H~I~J~K~L~M~N~O~P~Q~R~S~T~U~V~W~X~Y~Z~[~\e~]~^~_~`~a~b~c~
d~e~f~g~h~i~j~k~l~m~n~o~p~q~r~s~t~u~v~w~x~y~z~{~|~}~~
.EN
.EQ
et.cauchy       627314300   9     1     100666  612       `
.po .5i
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo

et.cauchy
.ll 7.75i
.nf
.vs 16p
.sp
.EQ
gfont I
f sup (n) (z) = n! over  {2 pi i} int sub C
{f( zeta )} over { ( zeta - z ) sup n+1} d zeta
.EN
.sp 
.EQ

dE over  dt = - int rho PHI sub ,j sup (react) v sub j d sup 3 x

.EN
.EQ

dJ sub j over  dt = - int epsilon sub jkl x sub k rho PHI sub ,l sup (react) d sup 3 x

.EN

.EQ
dE over dt = - 1 over 5 < { I to "..." } sub jk {I to "..."} sub jk >
.EN


.EQ
|  DELTA B sub n sup roman "(GW)" | =
left ( { 2 F sub v ( omega sub n / 2 pi ) \(is sigma sub n dv } over
{M {omega sub n} sup 2} right ) sup 1/2 .
.EN
et.compete      627314300   9     1     100666  1465      `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.compete:
This set of equations took 70 minutes with MacEqn and 35 minutes with
MathWriter, according to an article in Tentacle (LLL), August 1987.
Takes 7 minutes locally (much of which was spent getting braces
balanced, unfortunately).
.nf
.sp 1i
.EQ
gfont I
xi sub 1 left {
 pile { P dot sub g above P dot sub s } right }
~ mark =~
left [ matrix { col {b sub 1 above b sub 5 } col {b sub 2 above b sub 6 } } right ]
left { pile { P sub g above P sub s } right }
~+~ left { pile { b sub 3 (t) above b sub 8 (t) } right }
~+~ left { pile { b sub 4 above b sub 9 } right }
~+~ left { pile { 0 sub "" above g sub 1 } right }
.EN
.sp
.EQ
b sub 2 ~ lineup =~ [ 1 + ( pi sub g sup o / epsilon sub s )]
.EN
.sp
.EQ
b sub 3 (t) ~ lineup =~ pi tilde sub g
.EN
.sp 2
This is an unrelated set for science typographers

.LP
.EQ
(N sub roman Sh ) sub a sup * mark = 1 over 2 left ( d sub t over L right )
  N sub roman Re N sub roman Sc
.EN
.EQ
lineup times
left [
{ 1 - sum from j=1 to {j= inf} {-4 beta sub j} over {beta sub j sup 2}
  left ( {d phi sub j} over dr sub + right ) sub {r sub + =1}
  exp left ( {- beta sub j sup 2 (x/r sub t ) } over { N sub Re N sub roman Sc} right ) 
}
over
{ 1 + sum from j=1 to {j= inf} {-4 beta sub j} over {beta sub j sup 2}
  left ( {d phi sub j} over dr sub + right ) sub {r sub + =1}
  exp left ( {- beta sub j sup 2 (x/r sub t ) } over { N sub Re N sub roman Sc} right ) 
}
right ]
.EN

Compare         627314300   9     1     100777  87        `
for i in $*
do
	echo $i:
	eqn $i  >foo1
	a.out $i  >foo2
	diff -h foo1 foo2 | ind
done

et.tune         627314300   9     1     100666  824       `
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
et.tune:
.vs 20p
You can now (or atl east when i install it) tune parameters
that control the subscript base shift and superscript shift
in eqn.  syntax and some experimental values given below.
Subbase is the distance to move down for a subscript (in ems),
Supshift is the distance to move up for a superscript.
The number can be absolute as in the 2nd example, or relative,
as in the 3rd.  Once you've overwritten the value, it's gone
forever.

.sp 1i
.EQ
x sub 2 sup (n-2) x sub 1 sup [y-2] f sub 2 sup prime f sub 2 sup '
.EN

.EQ
define Subbase % 0.25 %
define Supshift % .5 %
x sub 2 sup (n-2) x sub 1 sup [y-2] f sub 2 sup prime f sub 2 sup '
.EN

.EQ
define Subbase % -.05 %
define Supshift % -.05 %
x sub 2 sup (n-2) x sub 1 sup [y-2] f sub 2 sup prime f sub 2 sup '
.EN
dg.gen          627314300   9     1     100777  1514      `
cat <<\!
.nf
.sp .5i
.sy date >/tmp/foo
.so /tmp/foo
.nf
.vs 16p
.sp
!

awk '
function pad(s,	n,	i, j) {
	if (s ~ /^[a-zA-Z]$/)
		s = "\\f2" s "\\fP"
	printf("%s%s", s, shim(n))
}
function shim(n) {
	return substr("\\^\\^\\^\\^\\^\\^\\^\\^\\^\\^\\^", 1, 2*n)
}

{	for (n = 0; n <= 3; n++) {
		for (i = 1; i <= NF; i++)
			pad($i, n)
		printf("\n");
	}
	printf("\n")
}
' <<\!
2 ( x + 1 ) f ( x ) h ( x 2 ) ( 2 + x ) ( \(*p + 1 ) 2 x | x | || x || g ( x ) x i , j ( i ) ( j ) 3 f [ x ] x / x \(mo S { min } m i n !
2 ( y + 1 ) f ( y ) h ( y 2 ) ( 2 + y ) ( \(*p + 1 ) 2 y | y | || y || g ( y ) y i , j ( i ) ( j ) 3 f [ y ] y / y \(mo S { min } m i n !
2 ( X + 1 ) f ( X ) h ( X 2 ) ( 2 + X ) ( \(*p + 1 ) 2 X | X | || X || g ( X ) X i , j ( i ) ( j ) 3 f [ X ] X / X \(mo S { min } m i n !
2 ( Y + 1 ) f ( Y ) h ( Y 2 ) ( 2 + Y ) ( \(*p + 1 ) 2 Y | Y | || Y || g ( Y ) Y i , j ( i ) ( j ) 3 f [ Y ] Y / Y \(mo S { min } m i n !
2 ( \(*p + 1 ) f ( \(*p ) h ( \(*p 2 ) ( 2 + \(*p ) ( \(*p + 1 ) 2 \(*p | \(*p | || \(*p || g ( \(*p ) \(*p i , j ( i ) ( j ) 3 f [ \(*p ] \(*p / \(*p \(mo S { min } m i n !
2 ( f + 1 ) f ( f ) h ( f 2 ) ( 2 + f ) ( f + 1 ) 2 f | f | || f || g ( f ) f i , j ( i ) ( j ) 3 f [ f ] f / f \(mo S { min } m i n !
2 ( i + 1 ) f ( i ) h ( i 2 ) ( 2 + i ) ( \(*p + 1 ) 2 i | i | || i || g ( i ) i i , j ( i ) ( j ) 3 f [ i ] i / i \(mo S { min } m i n !
2 ( j + 1 ) f ( j ) h ( j 2 ) ( 2 + j ) ( \(*p + 1 ) 2 j | j | || j || g ( j ) j i , j ( i ) ( j ) 3 f [ j ] j / j \(mo S { min } m i n !
!
et.vertbar      677274495   9     1     100666  175       `
.sp 1i
.EQ
(|x|) <= [|y|] ~~~
(|X|) <= [|X|] ~~~
(|\(*a|) <= [|\(*b|]
.EN
.sp 1i
.fp 1 PA
.fp 2 PI
.fp 3 PB
.EQ
(|x|) <= [|y|] ~~~
(|X|) <= [|X|] ~~~
(|\(*a|) <= [|\(*b|]
.EN

